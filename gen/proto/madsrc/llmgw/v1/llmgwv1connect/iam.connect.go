// SPDX-FileCopyrightText: 2025 Mads R. Havmand <mads@v42.dk>
//
// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/madsrc/llmgw/v1/iam.proto

package llmgwv1connect

import (
	v1 "codeberg.org/MadsRC/llmgw/gen/proto/madsrc/llmgw/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IAMServiceName is the fully-qualified name of the IAMService service.
	IAMServiceName = "llmgw.v1.IAMService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IAMServiceCreateUserProcedure is the fully-qualified name of the IAMService's CreateUser RPC.
	IAMServiceCreateUserProcedure = "/llmgw.v1.IAMService/CreateUser"
	// IAMServiceGetUserProcedure is the fully-qualified name of the IAMService's GetUser RPC.
	IAMServiceGetUserProcedure = "/llmgw.v1.IAMService/GetUser"
	// IAMServiceGetUserByEmailProcedure is the fully-qualified name of the IAMService's GetUserByEmail
	// RPC.
	IAMServiceGetUserByEmailProcedure = "/llmgw.v1.IAMService/GetUserByEmail"
	// IAMServiceGetUserByExternalIDProcedure is the fully-qualified name of the IAMService's
	// GetUserByExternalID RPC.
	IAMServiceGetUserByExternalIDProcedure = "/llmgw.v1.IAMService/GetUserByExternalID"
	// IAMServiceListUsersByOrganizationProcedure is the fully-qualified name of the IAMService's
	// ListUsersByOrganization RPC.
	IAMServiceListUsersByOrganizationProcedure = "/llmgw.v1.IAMService/ListUsersByOrganization"
	// IAMServiceUpdateUserProcedure is the fully-qualified name of the IAMService's UpdateUser RPC.
	IAMServiceUpdateUserProcedure = "/llmgw.v1.IAMService/UpdateUser"
	// IAMServiceDeleteUserProcedure is the fully-qualified name of the IAMService's DeleteUser RPC.
	IAMServiceDeleteUserProcedure = "/llmgw.v1.IAMService/DeleteUser"
	// IAMServiceCreateOrganizationProcedure is the fully-qualified name of the IAMService's
	// CreateOrganization RPC.
	IAMServiceCreateOrganizationProcedure = "/llmgw.v1.IAMService/CreateOrganization"
	// IAMServiceGetOrganizationProcedure is the fully-qualified name of the IAMService's
	// GetOrganization RPC.
	IAMServiceGetOrganizationProcedure = "/llmgw.v1.IAMService/GetOrganization"
	// IAMServiceGetOrganizationByNameProcedure is the fully-qualified name of the IAMService's
	// GetOrganizationByName RPC.
	IAMServiceGetOrganizationByNameProcedure = "/llmgw.v1.IAMService/GetOrganizationByName"
	// IAMServiceListOrganizationsProcedure is the fully-qualified name of the IAMService's
	// ListOrganizations RPC.
	IAMServiceListOrganizationsProcedure = "/llmgw.v1.IAMService/ListOrganizations"
	// IAMServiceUpdateOrganizationProcedure is the fully-qualified name of the IAMService's
	// UpdateOrganization RPC.
	IAMServiceUpdateOrganizationProcedure = "/llmgw.v1.IAMService/UpdateOrganization"
	// IAMServiceDeleteOrganizationProcedure is the fully-qualified name of the IAMService's
	// DeleteOrganization RPC.
	IAMServiceDeleteOrganizationProcedure = "/llmgw.v1.IAMService/DeleteOrganization"
	// IAMServiceCreateTokenProcedure is the fully-qualified name of the IAMService's CreateToken RPC.
	IAMServiceCreateTokenProcedure = "/llmgw.v1.IAMService/CreateToken"
	// IAMServiceListUserTokensProcedure is the fully-qualified name of the IAMService's ListUserTokens
	// RPC.
	IAMServiceListUserTokensProcedure = "/llmgw.v1.IAMService/ListUserTokens"
	// IAMServiceRevokeTokenProcedure is the fully-qualified name of the IAMService's RevokeToken RPC.
	IAMServiceRevokeTokenProcedure = "/llmgw.v1.IAMService/RevokeToken"
)

// IAMServiceClient is a client for the llmgw.v1.IAMService service.
type IAMServiceClient interface {
	// User operations
	CreateUser(context.Context, *connect.Request[v1.IAMServiceCreateUserRequest]) (*connect.Response[v1.IAMServiceCreateUserResponse], error)
	GetUser(context.Context, *connect.Request[v1.IAMServiceGetUserRequest]) (*connect.Response[v1.IAMServiceGetUserResponse], error)
	GetUserByEmail(context.Context, *connect.Request[v1.IAMServiceGetUserByEmailRequest]) (*connect.Response[v1.IAMServiceGetUserByEmailResponse], error)
	GetUserByExternalID(context.Context, *connect.Request[v1.IAMServiceGetUserByExternalIDRequest]) (*connect.Response[v1.IAMServiceGetUserByExternalIDResponse], error)
	ListUsersByOrganization(context.Context, *connect.Request[v1.IAMServiceListUsersByOrganizationRequest]) (*connect.Response[v1.IAMServiceListUsersByOrganizationResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.IAMServiceUpdateUserRequest]) (*connect.Response[v1.IAMServiceUpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.IAMServiceDeleteUserRequest]) (*connect.Response[v1.IAMServiceDeleteUserResponse], error)
	// Organization operations
	CreateOrganization(context.Context, *connect.Request[v1.IAMServiceCreateOrganizationRequest]) (*connect.Response[v1.IAMServiceCreateOrganizationResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.IAMServiceGetOrganizationRequest]) (*connect.Response[v1.IAMServiceGetOrganizationResponse], error)
	GetOrganizationByName(context.Context, *connect.Request[v1.IAMServiceGetOrganizationByNameRequest]) (*connect.Response[v1.IAMServiceGetOrganizationByNameResponse], error)
	ListOrganizations(context.Context, *connect.Request[v1.IAMServiceListOrganizationsRequest]) (*connect.Response[v1.IAMServiceListOrganizationsResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.IAMServiceUpdateOrganizationRequest]) (*connect.Response[v1.IAMServiceUpdateOrganizationResponse], error)
	DeleteOrganization(context.Context, *connect.Request[v1.IAMServiceDeleteOrganizationRequest]) (*connect.Response[v1.IAMServiceDeleteOrganizationResponse], error)
	// Token operations
	CreateToken(context.Context, *connect.Request[v1.IAMServiceCreateTokenRequest]) (*connect.Response[v1.IAMServiceCreateTokenResponse], error)
	ListUserTokens(context.Context, *connect.Request[v1.IAMServiceListUserTokensRequest]) (*connect.Response[v1.IAMServiceListUserTokensResponse], error)
	RevokeToken(context.Context, *connect.Request[v1.IAMServiceRevokeTokenRequest]) (*connect.Response[v1.IAMServiceRevokeTokenResponse], error)
}

// NewIAMServiceClient constructs a client for the llmgw.v1.IAMService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIAMServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IAMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	iAMServiceMethods := v1.File_proto_madsrc_llmgw_v1_iam_proto.Services().ByName("IAMService").Methods()
	return &iAMServiceClient{
		createUser: connect.NewClient[v1.IAMServiceCreateUserRequest, v1.IAMServiceCreateUserResponse](
			httpClient,
			baseURL+IAMServiceCreateUserProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.IAMServiceGetUserRequest, v1.IAMServiceGetUserResponse](
			httpClient,
			baseURL+IAMServiceGetUserProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		getUserByEmail: connect.NewClient[v1.IAMServiceGetUserByEmailRequest, v1.IAMServiceGetUserByEmailResponse](
			httpClient,
			baseURL+IAMServiceGetUserByEmailProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("GetUserByEmail")),
			connect.WithClientOptions(opts...),
		),
		getUserByExternalID: connect.NewClient[v1.IAMServiceGetUserByExternalIDRequest, v1.IAMServiceGetUserByExternalIDResponse](
			httpClient,
			baseURL+IAMServiceGetUserByExternalIDProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("GetUserByExternalID")),
			connect.WithClientOptions(opts...),
		),
		listUsersByOrganization: connect.NewClient[v1.IAMServiceListUsersByOrganizationRequest, v1.IAMServiceListUsersByOrganizationResponse](
			httpClient,
			baseURL+IAMServiceListUsersByOrganizationProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("ListUsersByOrganization")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.IAMServiceUpdateUserRequest, v1.IAMServiceUpdateUserResponse](
			httpClient,
			baseURL+IAMServiceUpdateUserProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.IAMServiceDeleteUserRequest, v1.IAMServiceDeleteUserResponse](
			httpClient,
			baseURL+IAMServiceDeleteUserProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		createOrganization: connect.NewClient[v1.IAMServiceCreateOrganizationRequest, v1.IAMServiceCreateOrganizationResponse](
			httpClient,
			baseURL+IAMServiceCreateOrganizationProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("CreateOrganization")),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[v1.IAMServiceGetOrganizationRequest, v1.IAMServiceGetOrganizationResponse](
			httpClient,
			baseURL+IAMServiceGetOrganizationProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("GetOrganization")),
			connect.WithClientOptions(opts...),
		),
		getOrganizationByName: connect.NewClient[v1.IAMServiceGetOrganizationByNameRequest, v1.IAMServiceGetOrganizationByNameResponse](
			httpClient,
			baseURL+IAMServiceGetOrganizationByNameProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("GetOrganizationByName")),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v1.IAMServiceListOrganizationsRequest, v1.IAMServiceListOrganizationsResponse](
			httpClient,
			baseURL+IAMServiceListOrganizationsProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("ListOrganizations")),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v1.IAMServiceUpdateOrganizationRequest, v1.IAMServiceUpdateOrganizationResponse](
			httpClient,
			baseURL+IAMServiceUpdateOrganizationProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("UpdateOrganization")),
			connect.WithClientOptions(opts...),
		),
		deleteOrganization: connect.NewClient[v1.IAMServiceDeleteOrganizationRequest, v1.IAMServiceDeleteOrganizationResponse](
			httpClient,
			baseURL+IAMServiceDeleteOrganizationProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("DeleteOrganization")),
			connect.WithClientOptions(opts...),
		),
		createToken: connect.NewClient[v1.IAMServiceCreateTokenRequest, v1.IAMServiceCreateTokenResponse](
			httpClient,
			baseURL+IAMServiceCreateTokenProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("CreateToken")),
			connect.WithClientOptions(opts...),
		),
		listUserTokens: connect.NewClient[v1.IAMServiceListUserTokensRequest, v1.IAMServiceListUserTokensResponse](
			httpClient,
			baseURL+IAMServiceListUserTokensProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("ListUserTokens")),
			connect.WithClientOptions(opts...),
		),
		revokeToken: connect.NewClient[v1.IAMServiceRevokeTokenRequest, v1.IAMServiceRevokeTokenResponse](
			httpClient,
			baseURL+IAMServiceRevokeTokenProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("RevokeToken")),
			connect.WithClientOptions(opts...),
		),
	}
}

// iAMServiceClient implements IAMServiceClient.
type iAMServiceClient struct {
	createUser              *connect.Client[v1.IAMServiceCreateUserRequest, v1.IAMServiceCreateUserResponse]
	getUser                 *connect.Client[v1.IAMServiceGetUserRequest, v1.IAMServiceGetUserResponse]
	getUserByEmail          *connect.Client[v1.IAMServiceGetUserByEmailRequest, v1.IAMServiceGetUserByEmailResponse]
	getUserByExternalID     *connect.Client[v1.IAMServiceGetUserByExternalIDRequest, v1.IAMServiceGetUserByExternalIDResponse]
	listUsersByOrganization *connect.Client[v1.IAMServiceListUsersByOrganizationRequest, v1.IAMServiceListUsersByOrganizationResponse]
	updateUser              *connect.Client[v1.IAMServiceUpdateUserRequest, v1.IAMServiceUpdateUserResponse]
	deleteUser              *connect.Client[v1.IAMServiceDeleteUserRequest, v1.IAMServiceDeleteUserResponse]
	createOrganization      *connect.Client[v1.IAMServiceCreateOrganizationRequest, v1.IAMServiceCreateOrganizationResponse]
	getOrganization         *connect.Client[v1.IAMServiceGetOrganizationRequest, v1.IAMServiceGetOrganizationResponse]
	getOrganizationByName   *connect.Client[v1.IAMServiceGetOrganizationByNameRequest, v1.IAMServiceGetOrganizationByNameResponse]
	listOrganizations       *connect.Client[v1.IAMServiceListOrganizationsRequest, v1.IAMServiceListOrganizationsResponse]
	updateOrganization      *connect.Client[v1.IAMServiceUpdateOrganizationRequest, v1.IAMServiceUpdateOrganizationResponse]
	deleteOrganization      *connect.Client[v1.IAMServiceDeleteOrganizationRequest, v1.IAMServiceDeleteOrganizationResponse]
	createToken             *connect.Client[v1.IAMServiceCreateTokenRequest, v1.IAMServiceCreateTokenResponse]
	listUserTokens          *connect.Client[v1.IAMServiceListUserTokensRequest, v1.IAMServiceListUserTokensResponse]
	revokeToken             *connect.Client[v1.IAMServiceRevokeTokenRequest, v1.IAMServiceRevokeTokenResponse]
}

// CreateUser calls llmgw.v1.IAMService.CreateUser.
func (c *iAMServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.IAMServiceCreateUserRequest]) (*connect.Response[v1.IAMServiceCreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUser calls llmgw.v1.IAMService.GetUser.
func (c *iAMServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.IAMServiceGetUserRequest]) (*connect.Response[v1.IAMServiceGetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// GetUserByEmail calls llmgw.v1.IAMService.GetUserByEmail.
func (c *iAMServiceClient) GetUserByEmail(ctx context.Context, req *connect.Request[v1.IAMServiceGetUserByEmailRequest]) (*connect.Response[v1.IAMServiceGetUserByEmailResponse], error) {
	return c.getUserByEmail.CallUnary(ctx, req)
}

// GetUserByExternalID calls llmgw.v1.IAMService.GetUserByExternalID.
func (c *iAMServiceClient) GetUserByExternalID(ctx context.Context, req *connect.Request[v1.IAMServiceGetUserByExternalIDRequest]) (*connect.Response[v1.IAMServiceGetUserByExternalIDResponse], error) {
	return c.getUserByExternalID.CallUnary(ctx, req)
}

// ListUsersByOrganization calls llmgw.v1.IAMService.ListUsersByOrganization.
func (c *iAMServiceClient) ListUsersByOrganization(ctx context.Context, req *connect.Request[v1.IAMServiceListUsersByOrganizationRequest]) (*connect.Response[v1.IAMServiceListUsersByOrganizationResponse], error) {
	return c.listUsersByOrganization.CallUnary(ctx, req)
}

// UpdateUser calls llmgw.v1.IAMService.UpdateUser.
func (c *iAMServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.IAMServiceUpdateUserRequest]) (*connect.Response[v1.IAMServiceUpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls llmgw.v1.IAMService.DeleteUser.
func (c *iAMServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.IAMServiceDeleteUserRequest]) (*connect.Response[v1.IAMServiceDeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// CreateOrganization calls llmgw.v1.IAMService.CreateOrganization.
func (c *iAMServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v1.IAMServiceCreateOrganizationRequest]) (*connect.Response[v1.IAMServiceCreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// GetOrganization calls llmgw.v1.IAMService.GetOrganization.
func (c *iAMServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.IAMServiceGetOrganizationRequest]) (*connect.Response[v1.IAMServiceGetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// GetOrganizationByName calls llmgw.v1.IAMService.GetOrganizationByName.
func (c *iAMServiceClient) GetOrganizationByName(ctx context.Context, req *connect.Request[v1.IAMServiceGetOrganizationByNameRequest]) (*connect.Response[v1.IAMServiceGetOrganizationByNameResponse], error) {
	return c.getOrganizationByName.CallUnary(ctx, req)
}

// ListOrganizations calls llmgw.v1.IAMService.ListOrganizations.
func (c *iAMServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v1.IAMServiceListOrganizationsRequest]) (*connect.Response[v1.IAMServiceListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// UpdateOrganization calls llmgw.v1.IAMService.UpdateOrganization.
func (c *iAMServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v1.IAMServiceUpdateOrganizationRequest]) (*connect.Response[v1.IAMServiceUpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// DeleteOrganization calls llmgw.v1.IAMService.DeleteOrganization.
func (c *iAMServiceClient) DeleteOrganization(ctx context.Context, req *connect.Request[v1.IAMServiceDeleteOrganizationRequest]) (*connect.Response[v1.IAMServiceDeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// CreateToken calls llmgw.v1.IAMService.CreateToken.
func (c *iAMServiceClient) CreateToken(ctx context.Context, req *connect.Request[v1.IAMServiceCreateTokenRequest]) (*connect.Response[v1.IAMServiceCreateTokenResponse], error) {
	return c.createToken.CallUnary(ctx, req)
}

// ListUserTokens calls llmgw.v1.IAMService.ListUserTokens.
func (c *iAMServiceClient) ListUserTokens(ctx context.Context, req *connect.Request[v1.IAMServiceListUserTokensRequest]) (*connect.Response[v1.IAMServiceListUserTokensResponse], error) {
	return c.listUserTokens.CallUnary(ctx, req)
}

// RevokeToken calls llmgw.v1.IAMService.RevokeToken.
func (c *iAMServiceClient) RevokeToken(ctx context.Context, req *connect.Request[v1.IAMServiceRevokeTokenRequest]) (*connect.Response[v1.IAMServiceRevokeTokenResponse], error) {
	return c.revokeToken.CallUnary(ctx, req)
}

// IAMServiceHandler is an implementation of the llmgw.v1.IAMService service.
type IAMServiceHandler interface {
	// User operations
	CreateUser(context.Context, *connect.Request[v1.IAMServiceCreateUserRequest]) (*connect.Response[v1.IAMServiceCreateUserResponse], error)
	GetUser(context.Context, *connect.Request[v1.IAMServiceGetUserRequest]) (*connect.Response[v1.IAMServiceGetUserResponse], error)
	GetUserByEmail(context.Context, *connect.Request[v1.IAMServiceGetUserByEmailRequest]) (*connect.Response[v1.IAMServiceGetUserByEmailResponse], error)
	GetUserByExternalID(context.Context, *connect.Request[v1.IAMServiceGetUserByExternalIDRequest]) (*connect.Response[v1.IAMServiceGetUserByExternalIDResponse], error)
	ListUsersByOrganization(context.Context, *connect.Request[v1.IAMServiceListUsersByOrganizationRequest]) (*connect.Response[v1.IAMServiceListUsersByOrganizationResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.IAMServiceUpdateUserRequest]) (*connect.Response[v1.IAMServiceUpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.IAMServiceDeleteUserRequest]) (*connect.Response[v1.IAMServiceDeleteUserResponse], error)
	// Organization operations
	CreateOrganization(context.Context, *connect.Request[v1.IAMServiceCreateOrganizationRequest]) (*connect.Response[v1.IAMServiceCreateOrganizationResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.IAMServiceGetOrganizationRequest]) (*connect.Response[v1.IAMServiceGetOrganizationResponse], error)
	GetOrganizationByName(context.Context, *connect.Request[v1.IAMServiceGetOrganizationByNameRequest]) (*connect.Response[v1.IAMServiceGetOrganizationByNameResponse], error)
	ListOrganizations(context.Context, *connect.Request[v1.IAMServiceListOrganizationsRequest]) (*connect.Response[v1.IAMServiceListOrganizationsResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.IAMServiceUpdateOrganizationRequest]) (*connect.Response[v1.IAMServiceUpdateOrganizationResponse], error)
	DeleteOrganization(context.Context, *connect.Request[v1.IAMServiceDeleteOrganizationRequest]) (*connect.Response[v1.IAMServiceDeleteOrganizationResponse], error)
	// Token operations
	CreateToken(context.Context, *connect.Request[v1.IAMServiceCreateTokenRequest]) (*connect.Response[v1.IAMServiceCreateTokenResponse], error)
	ListUserTokens(context.Context, *connect.Request[v1.IAMServiceListUserTokensRequest]) (*connect.Response[v1.IAMServiceListUserTokensResponse], error)
	RevokeToken(context.Context, *connect.Request[v1.IAMServiceRevokeTokenRequest]) (*connect.Response[v1.IAMServiceRevokeTokenResponse], error)
}

// NewIAMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIAMServiceHandler(svc IAMServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	iAMServiceMethods := v1.File_proto_madsrc_llmgw_v1_iam_proto.Services().ByName("IAMService").Methods()
	iAMServiceCreateUserHandler := connect.NewUnaryHandler(
		IAMServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(iAMServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceGetUserHandler := connect.NewUnaryHandler(
		IAMServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(iAMServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceGetUserByEmailHandler := connect.NewUnaryHandler(
		IAMServiceGetUserByEmailProcedure,
		svc.GetUserByEmail,
		connect.WithSchema(iAMServiceMethods.ByName("GetUserByEmail")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceGetUserByExternalIDHandler := connect.NewUnaryHandler(
		IAMServiceGetUserByExternalIDProcedure,
		svc.GetUserByExternalID,
		connect.WithSchema(iAMServiceMethods.ByName("GetUserByExternalID")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceListUsersByOrganizationHandler := connect.NewUnaryHandler(
		IAMServiceListUsersByOrganizationProcedure,
		svc.ListUsersByOrganization,
		connect.WithSchema(iAMServiceMethods.ByName("ListUsersByOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceUpdateUserHandler := connect.NewUnaryHandler(
		IAMServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(iAMServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceDeleteUserHandler := connect.NewUnaryHandler(
		IAMServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(iAMServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		IAMServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(iAMServiceMethods.ByName("CreateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceGetOrganizationHandler := connect.NewUnaryHandler(
		IAMServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(iAMServiceMethods.ByName("GetOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceGetOrganizationByNameHandler := connect.NewUnaryHandler(
		IAMServiceGetOrganizationByNameProcedure,
		svc.GetOrganizationByName,
		connect.WithSchema(iAMServiceMethods.ByName("GetOrganizationByName")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceListOrganizationsHandler := connect.NewUnaryHandler(
		IAMServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(iAMServiceMethods.ByName("ListOrganizations")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		IAMServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(iAMServiceMethods.ByName("UpdateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceDeleteOrganizationHandler := connect.NewUnaryHandler(
		IAMServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		connect.WithSchema(iAMServiceMethods.ByName("DeleteOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceCreateTokenHandler := connect.NewUnaryHandler(
		IAMServiceCreateTokenProcedure,
		svc.CreateToken,
		connect.WithSchema(iAMServiceMethods.ByName("CreateToken")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceListUserTokensHandler := connect.NewUnaryHandler(
		IAMServiceListUserTokensProcedure,
		svc.ListUserTokens,
		connect.WithSchema(iAMServiceMethods.ByName("ListUserTokens")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceRevokeTokenHandler := connect.NewUnaryHandler(
		IAMServiceRevokeTokenProcedure,
		svc.RevokeToken,
		connect.WithSchema(iAMServiceMethods.ByName("RevokeToken")),
		connect.WithHandlerOptions(opts...),
	)
	return "/llmgw.v1.IAMService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IAMServiceCreateUserProcedure:
			iAMServiceCreateUserHandler.ServeHTTP(w, r)
		case IAMServiceGetUserProcedure:
			iAMServiceGetUserHandler.ServeHTTP(w, r)
		case IAMServiceGetUserByEmailProcedure:
			iAMServiceGetUserByEmailHandler.ServeHTTP(w, r)
		case IAMServiceGetUserByExternalIDProcedure:
			iAMServiceGetUserByExternalIDHandler.ServeHTTP(w, r)
		case IAMServiceListUsersByOrganizationProcedure:
			iAMServiceListUsersByOrganizationHandler.ServeHTTP(w, r)
		case IAMServiceUpdateUserProcedure:
			iAMServiceUpdateUserHandler.ServeHTTP(w, r)
		case IAMServiceDeleteUserProcedure:
			iAMServiceDeleteUserHandler.ServeHTTP(w, r)
		case IAMServiceCreateOrganizationProcedure:
			iAMServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case IAMServiceGetOrganizationProcedure:
			iAMServiceGetOrganizationHandler.ServeHTTP(w, r)
		case IAMServiceGetOrganizationByNameProcedure:
			iAMServiceGetOrganizationByNameHandler.ServeHTTP(w, r)
		case IAMServiceListOrganizationsProcedure:
			iAMServiceListOrganizationsHandler.ServeHTTP(w, r)
		case IAMServiceUpdateOrganizationProcedure:
			iAMServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case IAMServiceDeleteOrganizationProcedure:
			iAMServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		case IAMServiceCreateTokenProcedure:
			iAMServiceCreateTokenHandler.ServeHTTP(w, r)
		case IAMServiceListUserTokensProcedure:
			iAMServiceListUserTokensHandler.ServeHTTP(w, r)
		case IAMServiceRevokeTokenProcedure:
			iAMServiceRevokeTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIAMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIAMServiceHandler struct{}

func (UnimplementedIAMServiceHandler) CreateUser(context.Context, *connect.Request[v1.IAMServiceCreateUserRequest]) (*connect.Response[v1.IAMServiceCreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.CreateUser is not implemented"))
}

func (UnimplementedIAMServiceHandler) GetUser(context.Context, *connect.Request[v1.IAMServiceGetUserRequest]) (*connect.Response[v1.IAMServiceGetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.GetUser is not implemented"))
}

func (UnimplementedIAMServiceHandler) GetUserByEmail(context.Context, *connect.Request[v1.IAMServiceGetUserByEmailRequest]) (*connect.Response[v1.IAMServiceGetUserByEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.GetUserByEmail is not implemented"))
}

func (UnimplementedIAMServiceHandler) GetUserByExternalID(context.Context, *connect.Request[v1.IAMServiceGetUserByExternalIDRequest]) (*connect.Response[v1.IAMServiceGetUserByExternalIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.GetUserByExternalID is not implemented"))
}

func (UnimplementedIAMServiceHandler) ListUsersByOrganization(context.Context, *connect.Request[v1.IAMServiceListUsersByOrganizationRequest]) (*connect.Response[v1.IAMServiceListUsersByOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.ListUsersByOrganization is not implemented"))
}

func (UnimplementedIAMServiceHandler) UpdateUser(context.Context, *connect.Request[v1.IAMServiceUpdateUserRequest]) (*connect.Response[v1.IAMServiceUpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.UpdateUser is not implemented"))
}

func (UnimplementedIAMServiceHandler) DeleteUser(context.Context, *connect.Request[v1.IAMServiceDeleteUserRequest]) (*connect.Response[v1.IAMServiceDeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.DeleteUser is not implemented"))
}

func (UnimplementedIAMServiceHandler) CreateOrganization(context.Context, *connect.Request[v1.IAMServiceCreateOrganizationRequest]) (*connect.Response[v1.IAMServiceCreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.CreateOrganization is not implemented"))
}

func (UnimplementedIAMServiceHandler) GetOrganization(context.Context, *connect.Request[v1.IAMServiceGetOrganizationRequest]) (*connect.Response[v1.IAMServiceGetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.GetOrganization is not implemented"))
}

func (UnimplementedIAMServiceHandler) GetOrganizationByName(context.Context, *connect.Request[v1.IAMServiceGetOrganizationByNameRequest]) (*connect.Response[v1.IAMServiceGetOrganizationByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.GetOrganizationByName is not implemented"))
}

func (UnimplementedIAMServiceHandler) ListOrganizations(context.Context, *connect.Request[v1.IAMServiceListOrganizationsRequest]) (*connect.Response[v1.IAMServiceListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.ListOrganizations is not implemented"))
}

func (UnimplementedIAMServiceHandler) UpdateOrganization(context.Context, *connect.Request[v1.IAMServiceUpdateOrganizationRequest]) (*connect.Response[v1.IAMServiceUpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.UpdateOrganization is not implemented"))
}

func (UnimplementedIAMServiceHandler) DeleteOrganization(context.Context, *connect.Request[v1.IAMServiceDeleteOrganizationRequest]) (*connect.Response[v1.IAMServiceDeleteOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.DeleteOrganization is not implemented"))
}

func (UnimplementedIAMServiceHandler) CreateToken(context.Context, *connect.Request[v1.IAMServiceCreateTokenRequest]) (*connect.Response[v1.IAMServiceCreateTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.CreateToken is not implemented"))
}

func (UnimplementedIAMServiceHandler) ListUserTokens(context.Context, *connect.Request[v1.IAMServiceListUserTokensRequest]) (*connect.Response[v1.IAMServiceListUserTokensResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.ListUserTokens is not implemented"))
}

func (UnimplementedIAMServiceHandler) RevokeToken(context.Context, *connect.Request[v1.IAMServiceRevokeTokenRequest]) (*connect.Response[v1.IAMServiceRevokeTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.IAMService.RevokeToken is not implemented"))
}
