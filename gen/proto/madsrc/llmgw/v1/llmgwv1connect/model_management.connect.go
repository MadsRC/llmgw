// SPDX-FileCopyrightText: 2025 Mads R. Havmand <mads@v42.dk>
//
// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/madsrc/llmgw/v1/model_management.proto

package llmgwv1connect

import (
	v1 "codeberg.org/MadsRC/llmgw/gen/proto/madsrc/llmgw/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ModelManagementServiceName is the fully-qualified name of the ModelManagementService service.
	ModelManagementServiceName = "llmgw.v1.ModelManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ModelManagementServiceGetProviderProcedure is the fully-qualified name of the
	// ModelManagementService's GetProvider RPC.
	ModelManagementServiceGetProviderProcedure = "/llmgw.v1.ModelManagementService/GetProvider"
	// ModelManagementServiceListProvidersProcedure is the fully-qualified name of the
	// ModelManagementService's ListProviders RPC.
	ModelManagementServiceListProvidersProcedure = "/llmgw.v1.ModelManagementService/ListProviders"
	// ModelManagementServiceCreateOpenRouterCredentialProcedure is the fully-qualified name of the
	// ModelManagementService's CreateOpenRouterCredential RPC.
	ModelManagementServiceCreateOpenRouterCredentialProcedure = "/llmgw.v1.ModelManagementService/CreateOpenRouterCredential"
	// ModelManagementServiceGetOpenRouterCredentialProcedure is the fully-qualified name of the
	// ModelManagementService's GetOpenRouterCredential RPC.
	ModelManagementServiceGetOpenRouterCredentialProcedure = "/llmgw.v1.ModelManagementService/GetOpenRouterCredential"
	// ModelManagementServiceListOpenRouterCredentialsProcedure is the fully-qualified name of the
	// ModelManagementService's ListOpenRouterCredentials RPC.
	ModelManagementServiceListOpenRouterCredentialsProcedure = "/llmgw.v1.ModelManagementService/ListOpenRouterCredentials"
	// ModelManagementServiceUpdateOpenRouterCredentialProcedure is the fully-qualified name of the
	// ModelManagementService's UpdateOpenRouterCredential RPC.
	ModelManagementServiceUpdateOpenRouterCredentialProcedure = "/llmgw.v1.ModelManagementService/UpdateOpenRouterCredential"
	// ModelManagementServiceDeleteOpenRouterCredentialProcedure is the fully-qualified name of the
	// ModelManagementService's DeleteOpenRouterCredential RPC.
	ModelManagementServiceDeleteOpenRouterCredentialProcedure = "/llmgw.v1.ModelManagementService/DeleteOpenRouterCredential"
	// ModelManagementServiceCreateModelProcedure is the fully-qualified name of the
	// ModelManagementService's CreateModel RPC.
	ModelManagementServiceCreateModelProcedure = "/llmgw.v1.ModelManagementService/CreateModel"
	// ModelManagementServiceGetModelProcedure is the fully-qualified name of the
	// ModelManagementService's GetModel RPC.
	ModelManagementServiceGetModelProcedure = "/llmgw.v1.ModelManagementService/GetModel"
	// ModelManagementServiceListModelsProcedure is the fully-qualified name of the
	// ModelManagementService's ListModels RPC.
	ModelManagementServiceListModelsProcedure = "/llmgw.v1.ModelManagementService/ListModels"
	// ModelManagementServiceUpdateModelProcedure is the fully-qualified name of the
	// ModelManagementService's UpdateModel RPC.
	ModelManagementServiceUpdateModelProcedure = "/llmgw.v1.ModelManagementService/UpdateModel"
	// ModelManagementServiceDeleteModelProcedure is the fully-qualified name of the
	// ModelManagementService's DeleteModel RPC.
	ModelManagementServiceDeleteModelProcedure = "/llmgw.v1.ModelManagementService/DeleteModel"
)

// ModelManagementServiceClient is a client for the llmgw.v1.ModelManagementService service.
type ModelManagementServiceClient interface {
	// Provider operations
	GetProvider(context.Context, *connect.Request[v1.ModelManagementServiceGetProviderRequest]) (*connect.Response[v1.ModelManagementServiceGetProviderResponse], error)
	ListProviders(context.Context, *connect.Request[v1.ModelManagementServiceListProvidersRequest]) (*connect.Response[v1.ModelManagementServiceListProvidersResponse], error)
	// OpenRouter Credential operations
	CreateOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceCreateOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceCreateOpenRouterCredentialResponse], error)
	GetOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceGetOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceGetOpenRouterCredentialResponse], error)
	ListOpenRouterCredentials(context.Context, *connect.Request[v1.ModelManagementServiceListOpenRouterCredentialsRequest]) (*connect.Response[v1.ModelManagementServiceListOpenRouterCredentialsResponse], error)
	UpdateOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceUpdateOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceUpdateOpenRouterCredentialResponse], error)
	DeleteOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceDeleteOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceDeleteOpenRouterCredentialResponse], error)
	// Model operations
	CreateModel(context.Context, *connect.Request[v1.ModelManagementServiceCreateModelRequest]) (*connect.Response[v1.ModelManagementServiceCreateModelResponse], error)
	GetModel(context.Context, *connect.Request[v1.ModelManagementServiceGetModelRequest]) (*connect.Response[v1.ModelManagementServiceGetModelResponse], error)
	ListModels(context.Context, *connect.Request[v1.ModelManagementServiceListModelsRequest]) (*connect.Response[v1.ModelManagementServiceListModelsResponse], error)
	UpdateModel(context.Context, *connect.Request[v1.ModelManagementServiceUpdateModelRequest]) (*connect.Response[v1.ModelManagementServiceUpdateModelResponse], error)
	DeleteModel(context.Context, *connect.Request[v1.ModelManagementServiceDeleteModelRequest]) (*connect.Response[v1.ModelManagementServiceDeleteModelResponse], error)
}

// NewModelManagementServiceClient constructs a client for the llmgw.v1.ModelManagementService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewModelManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ModelManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	modelManagementServiceMethods := v1.File_proto_madsrc_llmgw_v1_model_management_proto.Services().ByName("ModelManagementService").Methods()
	return &modelManagementServiceClient{
		getProvider: connect.NewClient[v1.ModelManagementServiceGetProviderRequest, v1.ModelManagementServiceGetProviderResponse](
			httpClient,
			baseURL+ModelManagementServiceGetProviderProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("GetProvider")),
			connect.WithClientOptions(opts...),
		),
		listProviders: connect.NewClient[v1.ModelManagementServiceListProvidersRequest, v1.ModelManagementServiceListProvidersResponse](
			httpClient,
			baseURL+ModelManagementServiceListProvidersProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("ListProviders")),
			connect.WithClientOptions(opts...),
		),
		createOpenRouterCredential: connect.NewClient[v1.ModelManagementServiceCreateOpenRouterCredentialRequest, v1.ModelManagementServiceCreateOpenRouterCredentialResponse](
			httpClient,
			baseURL+ModelManagementServiceCreateOpenRouterCredentialProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("CreateOpenRouterCredential")),
			connect.WithClientOptions(opts...),
		),
		getOpenRouterCredential: connect.NewClient[v1.ModelManagementServiceGetOpenRouterCredentialRequest, v1.ModelManagementServiceGetOpenRouterCredentialResponse](
			httpClient,
			baseURL+ModelManagementServiceGetOpenRouterCredentialProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("GetOpenRouterCredential")),
			connect.WithClientOptions(opts...),
		),
		listOpenRouterCredentials: connect.NewClient[v1.ModelManagementServiceListOpenRouterCredentialsRequest, v1.ModelManagementServiceListOpenRouterCredentialsResponse](
			httpClient,
			baseURL+ModelManagementServiceListOpenRouterCredentialsProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("ListOpenRouterCredentials")),
			connect.WithClientOptions(opts...),
		),
		updateOpenRouterCredential: connect.NewClient[v1.ModelManagementServiceUpdateOpenRouterCredentialRequest, v1.ModelManagementServiceUpdateOpenRouterCredentialResponse](
			httpClient,
			baseURL+ModelManagementServiceUpdateOpenRouterCredentialProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("UpdateOpenRouterCredential")),
			connect.WithClientOptions(opts...),
		),
		deleteOpenRouterCredential: connect.NewClient[v1.ModelManagementServiceDeleteOpenRouterCredentialRequest, v1.ModelManagementServiceDeleteOpenRouterCredentialResponse](
			httpClient,
			baseURL+ModelManagementServiceDeleteOpenRouterCredentialProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("DeleteOpenRouterCredential")),
			connect.WithClientOptions(opts...),
		),
		createModel: connect.NewClient[v1.ModelManagementServiceCreateModelRequest, v1.ModelManagementServiceCreateModelResponse](
			httpClient,
			baseURL+ModelManagementServiceCreateModelProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("CreateModel")),
			connect.WithClientOptions(opts...),
		),
		getModel: connect.NewClient[v1.ModelManagementServiceGetModelRequest, v1.ModelManagementServiceGetModelResponse](
			httpClient,
			baseURL+ModelManagementServiceGetModelProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("GetModel")),
			connect.WithClientOptions(opts...),
		),
		listModels: connect.NewClient[v1.ModelManagementServiceListModelsRequest, v1.ModelManagementServiceListModelsResponse](
			httpClient,
			baseURL+ModelManagementServiceListModelsProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("ListModels")),
			connect.WithClientOptions(opts...),
		),
		updateModel: connect.NewClient[v1.ModelManagementServiceUpdateModelRequest, v1.ModelManagementServiceUpdateModelResponse](
			httpClient,
			baseURL+ModelManagementServiceUpdateModelProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("UpdateModel")),
			connect.WithClientOptions(opts...),
		),
		deleteModel: connect.NewClient[v1.ModelManagementServiceDeleteModelRequest, v1.ModelManagementServiceDeleteModelResponse](
			httpClient,
			baseURL+ModelManagementServiceDeleteModelProcedure,
			connect.WithSchema(modelManagementServiceMethods.ByName("DeleteModel")),
			connect.WithClientOptions(opts...),
		),
	}
}

// modelManagementServiceClient implements ModelManagementServiceClient.
type modelManagementServiceClient struct {
	getProvider                *connect.Client[v1.ModelManagementServiceGetProviderRequest, v1.ModelManagementServiceGetProviderResponse]
	listProviders              *connect.Client[v1.ModelManagementServiceListProvidersRequest, v1.ModelManagementServiceListProvidersResponse]
	createOpenRouterCredential *connect.Client[v1.ModelManagementServiceCreateOpenRouterCredentialRequest, v1.ModelManagementServiceCreateOpenRouterCredentialResponse]
	getOpenRouterCredential    *connect.Client[v1.ModelManagementServiceGetOpenRouterCredentialRequest, v1.ModelManagementServiceGetOpenRouterCredentialResponse]
	listOpenRouterCredentials  *connect.Client[v1.ModelManagementServiceListOpenRouterCredentialsRequest, v1.ModelManagementServiceListOpenRouterCredentialsResponse]
	updateOpenRouterCredential *connect.Client[v1.ModelManagementServiceUpdateOpenRouterCredentialRequest, v1.ModelManagementServiceUpdateOpenRouterCredentialResponse]
	deleteOpenRouterCredential *connect.Client[v1.ModelManagementServiceDeleteOpenRouterCredentialRequest, v1.ModelManagementServiceDeleteOpenRouterCredentialResponse]
	createModel                *connect.Client[v1.ModelManagementServiceCreateModelRequest, v1.ModelManagementServiceCreateModelResponse]
	getModel                   *connect.Client[v1.ModelManagementServiceGetModelRequest, v1.ModelManagementServiceGetModelResponse]
	listModels                 *connect.Client[v1.ModelManagementServiceListModelsRequest, v1.ModelManagementServiceListModelsResponse]
	updateModel                *connect.Client[v1.ModelManagementServiceUpdateModelRequest, v1.ModelManagementServiceUpdateModelResponse]
	deleteModel                *connect.Client[v1.ModelManagementServiceDeleteModelRequest, v1.ModelManagementServiceDeleteModelResponse]
}

// GetProvider calls llmgw.v1.ModelManagementService.GetProvider.
func (c *modelManagementServiceClient) GetProvider(ctx context.Context, req *connect.Request[v1.ModelManagementServiceGetProviderRequest]) (*connect.Response[v1.ModelManagementServiceGetProviderResponse], error) {
	return c.getProvider.CallUnary(ctx, req)
}

// ListProviders calls llmgw.v1.ModelManagementService.ListProviders.
func (c *modelManagementServiceClient) ListProviders(ctx context.Context, req *connect.Request[v1.ModelManagementServiceListProvidersRequest]) (*connect.Response[v1.ModelManagementServiceListProvidersResponse], error) {
	return c.listProviders.CallUnary(ctx, req)
}

// CreateOpenRouterCredential calls llmgw.v1.ModelManagementService.CreateOpenRouterCredential.
func (c *modelManagementServiceClient) CreateOpenRouterCredential(ctx context.Context, req *connect.Request[v1.ModelManagementServiceCreateOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceCreateOpenRouterCredentialResponse], error) {
	return c.createOpenRouterCredential.CallUnary(ctx, req)
}

// GetOpenRouterCredential calls llmgw.v1.ModelManagementService.GetOpenRouterCredential.
func (c *modelManagementServiceClient) GetOpenRouterCredential(ctx context.Context, req *connect.Request[v1.ModelManagementServiceGetOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceGetOpenRouterCredentialResponse], error) {
	return c.getOpenRouterCredential.CallUnary(ctx, req)
}

// ListOpenRouterCredentials calls llmgw.v1.ModelManagementService.ListOpenRouterCredentials.
func (c *modelManagementServiceClient) ListOpenRouterCredentials(ctx context.Context, req *connect.Request[v1.ModelManagementServiceListOpenRouterCredentialsRequest]) (*connect.Response[v1.ModelManagementServiceListOpenRouterCredentialsResponse], error) {
	return c.listOpenRouterCredentials.CallUnary(ctx, req)
}

// UpdateOpenRouterCredential calls llmgw.v1.ModelManagementService.UpdateOpenRouterCredential.
func (c *modelManagementServiceClient) UpdateOpenRouterCredential(ctx context.Context, req *connect.Request[v1.ModelManagementServiceUpdateOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceUpdateOpenRouterCredentialResponse], error) {
	return c.updateOpenRouterCredential.CallUnary(ctx, req)
}

// DeleteOpenRouterCredential calls llmgw.v1.ModelManagementService.DeleteOpenRouterCredential.
func (c *modelManagementServiceClient) DeleteOpenRouterCredential(ctx context.Context, req *connect.Request[v1.ModelManagementServiceDeleteOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceDeleteOpenRouterCredentialResponse], error) {
	return c.deleteOpenRouterCredential.CallUnary(ctx, req)
}

// CreateModel calls llmgw.v1.ModelManagementService.CreateModel.
func (c *modelManagementServiceClient) CreateModel(ctx context.Context, req *connect.Request[v1.ModelManagementServiceCreateModelRequest]) (*connect.Response[v1.ModelManagementServiceCreateModelResponse], error) {
	return c.createModel.CallUnary(ctx, req)
}

// GetModel calls llmgw.v1.ModelManagementService.GetModel.
func (c *modelManagementServiceClient) GetModel(ctx context.Context, req *connect.Request[v1.ModelManagementServiceGetModelRequest]) (*connect.Response[v1.ModelManagementServiceGetModelResponse], error) {
	return c.getModel.CallUnary(ctx, req)
}

// ListModels calls llmgw.v1.ModelManagementService.ListModels.
func (c *modelManagementServiceClient) ListModels(ctx context.Context, req *connect.Request[v1.ModelManagementServiceListModelsRequest]) (*connect.Response[v1.ModelManagementServiceListModelsResponse], error) {
	return c.listModels.CallUnary(ctx, req)
}

// UpdateModel calls llmgw.v1.ModelManagementService.UpdateModel.
func (c *modelManagementServiceClient) UpdateModel(ctx context.Context, req *connect.Request[v1.ModelManagementServiceUpdateModelRequest]) (*connect.Response[v1.ModelManagementServiceUpdateModelResponse], error) {
	return c.updateModel.CallUnary(ctx, req)
}

// DeleteModel calls llmgw.v1.ModelManagementService.DeleteModel.
func (c *modelManagementServiceClient) DeleteModel(ctx context.Context, req *connect.Request[v1.ModelManagementServiceDeleteModelRequest]) (*connect.Response[v1.ModelManagementServiceDeleteModelResponse], error) {
	return c.deleteModel.CallUnary(ctx, req)
}

// ModelManagementServiceHandler is an implementation of the llmgw.v1.ModelManagementService
// service.
type ModelManagementServiceHandler interface {
	// Provider operations
	GetProvider(context.Context, *connect.Request[v1.ModelManagementServiceGetProviderRequest]) (*connect.Response[v1.ModelManagementServiceGetProviderResponse], error)
	ListProviders(context.Context, *connect.Request[v1.ModelManagementServiceListProvidersRequest]) (*connect.Response[v1.ModelManagementServiceListProvidersResponse], error)
	// OpenRouter Credential operations
	CreateOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceCreateOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceCreateOpenRouterCredentialResponse], error)
	GetOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceGetOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceGetOpenRouterCredentialResponse], error)
	ListOpenRouterCredentials(context.Context, *connect.Request[v1.ModelManagementServiceListOpenRouterCredentialsRequest]) (*connect.Response[v1.ModelManagementServiceListOpenRouterCredentialsResponse], error)
	UpdateOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceUpdateOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceUpdateOpenRouterCredentialResponse], error)
	DeleteOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceDeleteOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceDeleteOpenRouterCredentialResponse], error)
	// Model operations
	CreateModel(context.Context, *connect.Request[v1.ModelManagementServiceCreateModelRequest]) (*connect.Response[v1.ModelManagementServiceCreateModelResponse], error)
	GetModel(context.Context, *connect.Request[v1.ModelManagementServiceGetModelRequest]) (*connect.Response[v1.ModelManagementServiceGetModelResponse], error)
	ListModels(context.Context, *connect.Request[v1.ModelManagementServiceListModelsRequest]) (*connect.Response[v1.ModelManagementServiceListModelsResponse], error)
	UpdateModel(context.Context, *connect.Request[v1.ModelManagementServiceUpdateModelRequest]) (*connect.Response[v1.ModelManagementServiceUpdateModelResponse], error)
	DeleteModel(context.Context, *connect.Request[v1.ModelManagementServiceDeleteModelRequest]) (*connect.Response[v1.ModelManagementServiceDeleteModelResponse], error)
}

// NewModelManagementServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewModelManagementServiceHandler(svc ModelManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	modelManagementServiceMethods := v1.File_proto_madsrc_llmgw_v1_model_management_proto.Services().ByName("ModelManagementService").Methods()
	modelManagementServiceGetProviderHandler := connect.NewUnaryHandler(
		ModelManagementServiceGetProviderProcedure,
		svc.GetProvider,
		connect.WithSchema(modelManagementServiceMethods.ByName("GetProvider")),
		connect.WithHandlerOptions(opts...),
	)
	modelManagementServiceListProvidersHandler := connect.NewUnaryHandler(
		ModelManagementServiceListProvidersProcedure,
		svc.ListProviders,
		connect.WithSchema(modelManagementServiceMethods.ByName("ListProviders")),
		connect.WithHandlerOptions(opts...),
	)
	modelManagementServiceCreateOpenRouterCredentialHandler := connect.NewUnaryHandler(
		ModelManagementServiceCreateOpenRouterCredentialProcedure,
		svc.CreateOpenRouterCredential,
		connect.WithSchema(modelManagementServiceMethods.ByName("CreateOpenRouterCredential")),
		connect.WithHandlerOptions(opts...),
	)
	modelManagementServiceGetOpenRouterCredentialHandler := connect.NewUnaryHandler(
		ModelManagementServiceGetOpenRouterCredentialProcedure,
		svc.GetOpenRouterCredential,
		connect.WithSchema(modelManagementServiceMethods.ByName("GetOpenRouterCredential")),
		connect.WithHandlerOptions(opts...),
	)
	modelManagementServiceListOpenRouterCredentialsHandler := connect.NewUnaryHandler(
		ModelManagementServiceListOpenRouterCredentialsProcedure,
		svc.ListOpenRouterCredentials,
		connect.WithSchema(modelManagementServiceMethods.ByName("ListOpenRouterCredentials")),
		connect.WithHandlerOptions(opts...),
	)
	modelManagementServiceUpdateOpenRouterCredentialHandler := connect.NewUnaryHandler(
		ModelManagementServiceUpdateOpenRouterCredentialProcedure,
		svc.UpdateOpenRouterCredential,
		connect.WithSchema(modelManagementServiceMethods.ByName("UpdateOpenRouterCredential")),
		connect.WithHandlerOptions(opts...),
	)
	modelManagementServiceDeleteOpenRouterCredentialHandler := connect.NewUnaryHandler(
		ModelManagementServiceDeleteOpenRouterCredentialProcedure,
		svc.DeleteOpenRouterCredential,
		connect.WithSchema(modelManagementServiceMethods.ByName("DeleteOpenRouterCredential")),
		connect.WithHandlerOptions(opts...),
	)
	modelManagementServiceCreateModelHandler := connect.NewUnaryHandler(
		ModelManagementServiceCreateModelProcedure,
		svc.CreateModel,
		connect.WithSchema(modelManagementServiceMethods.ByName("CreateModel")),
		connect.WithHandlerOptions(opts...),
	)
	modelManagementServiceGetModelHandler := connect.NewUnaryHandler(
		ModelManagementServiceGetModelProcedure,
		svc.GetModel,
		connect.WithSchema(modelManagementServiceMethods.ByName("GetModel")),
		connect.WithHandlerOptions(opts...),
	)
	modelManagementServiceListModelsHandler := connect.NewUnaryHandler(
		ModelManagementServiceListModelsProcedure,
		svc.ListModels,
		connect.WithSchema(modelManagementServiceMethods.ByName("ListModels")),
		connect.WithHandlerOptions(opts...),
	)
	modelManagementServiceUpdateModelHandler := connect.NewUnaryHandler(
		ModelManagementServiceUpdateModelProcedure,
		svc.UpdateModel,
		connect.WithSchema(modelManagementServiceMethods.ByName("UpdateModel")),
		connect.WithHandlerOptions(opts...),
	)
	modelManagementServiceDeleteModelHandler := connect.NewUnaryHandler(
		ModelManagementServiceDeleteModelProcedure,
		svc.DeleteModel,
		connect.WithSchema(modelManagementServiceMethods.ByName("DeleteModel")),
		connect.WithHandlerOptions(opts...),
	)
	return "/llmgw.v1.ModelManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ModelManagementServiceGetProviderProcedure:
			modelManagementServiceGetProviderHandler.ServeHTTP(w, r)
		case ModelManagementServiceListProvidersProcedure:
			modelManagementServiceListProvidersHandler.ServeHTTP(w, r)
		case ModelManagementServiceCreateOpenRouterCredentialProcedure:
			modelManagementServiceCreateOpenRouterCredentialHandler.ServeHTTP(w, r)
		case ModelManagementServiceGetOpenRouterCredentialProcedure:
			modelManagementServiceGetOpenRouterCredentialHandler.ServeHTTP(w, r)
		case ModelManagementServiceListOpenRouterCredentialsProcedure:
			modelManagementServiceListOpenRouterCredentialsHandler.ServeHTTP(w, r)
		case ModelManagementServiceUpdateOpenRouterCredentialProcedure:
			modelManagementServiceUpdateOpenRouterCredentialHandler.ServeHTTP(w, r)
		case ModelManagementServiceDeleteOpenRouterCredentialProcedure:
			modelManagementServiceDeleteOpenRouterCredentialHandler.ServeHTTP(w, r)
		case ModelManagementServiceCreateModelProcedure:
			modelManagementServiceCreateModelHandler.ServeHTTP(w, r)
		case ModelManagementServiceGetModelProcedure:
			modelManagementServiceGetModelHandler.ServeHTTP(w, r)
		case ModelManagementServiceListModelsProcedure:
			modelManagementServiceListModelsHandler.ServeHTTP(w, r)
		case ModelManagementServiceUpdateModelProcedure:
			modelManagementServiceUpdateModelHandler.ServeHTTP(w, r)
		case ModelManagementServiceDeleteModelProcedure:
			modelManagementServiceDeleteModelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedModelManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedModelManagementServiceHandler struct{}

func (UnimplementedModelManagementServiceHandler) GetProvider(context.Context, *connect.Request[v1.ModelManagementServiceGetProviderRequest]) (*connect.Response[v1.ModelManagementServiceGetProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.GetProvider is not implemented"))
}

func (UnimplementedModelManagementServiceHandler) ListProviders(context.Context, *connect.Request[v1.ModelManagementServiceListProvidersRequest]) (*connect.Response[v1.ModelManagementServiceListProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.ListProviders is not implemented"))
}

func (UnimplementedModelManagementServiceHandler) CreateOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceCreateOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceCreateOpenRouterCredentialResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.CreateOpenRouterCredential is not implemented"))
}

func (UnimplementedModelManagementServiceHandler) GetOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceGetOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceGetOpenRouterCredentialResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.GetOpenRouterCredential is not implemented"))
}

func (UnimplementedModelManagementServiceHandler) ListOpenRouterCredentials(context.Context, *connect.Request[v1.ModelManagementServiceListOpenRouterCredentialsRequest]) (*connect.Response[v1.ModelManagementServiceListOpenRouterCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.ListOpenRouterCredentials is not implemented"))
}

func (UnimplementedModelManagementServiceHandler) UpdateOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceUpdateOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceUpdateOpenRouterCredentialResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.UpdateOpenRouterCredential is not implemented"))
}

func (UnimplementedModelManagementServiceHandler) DeleteOpenRouterCredential(context.Context, *connect.Request[v1.ModelManagementServiceDeleteOpenRouterCredentialRequest]) (*connect.Response[v1.ModelManagementServiceDeleteOpenRouterCredentialResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.DeleteOpenRouterCredential is not implemented"))
}

func (UnimplementedModelManagementServiceHandler) CreateModel(context.Context, *connect.Request[v1.ModelManagementServiceCreateModelRequest]) (*connect.Response[v1.ModelManagementServiceCreateModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.CreateModel is not implemented"))
}

func (UnimplementedModelManagementServiceHandler) GetModel(context.Context, *connect.Request[v1.ModelManagementServiceGetModelRequest]) (*connect.Response[v1.ModelManagementServiceGetModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.GetModel is not implemented"))
}

func (UnimplementedModelManagementServiceHandler) ListModels(context.Context, *connect.Request[v1.ModelManagementServiceListModelsRequest]) (*connect.Response[v1.ModelManagementServiceListModelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.ListModels is not implemented"))
}

func (UnimplementedModelManagementServiceHandler) UpdateModel(context.Context, *connect.Request[v1.ModelManagementServiceUpdateModelRequest]) (*connect.Response[v1.ModelManagementServiceUpdateModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.UpdateModel is not implemented"))
}

func (UnimplementedModelManagementServiceHandler) DeleteModel(context.Context, *connect.Request[v1.ModelManagementServiceDeleteModelRequest]) (*connect.Response[v1.ModelManagementServiceDeleteModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llmgw.v1.ModelManagementService.DeleteModel is not implemented"))
}
