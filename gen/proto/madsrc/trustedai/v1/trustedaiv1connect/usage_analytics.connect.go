// SPDX-FileCopyrightText: 2025 Mads R. Havmand <mads@v42.dk>
//
// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/madsrc/trustedai/v1/usage_analytics.proto

package trustedaiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/MadsRC/trustedai/gen/proto/madsrc/trustedai/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UsageAnalyticsServiceName is the fully-qualified name of the UsageAnalyticsService service.
	UsageAnalyticsServiceName = "trustedai.v1.UsageAnalyticsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UsageAnalyticsServiceGetUsageSummaryProcedure is the fully-qualified name of the
	// UsageAnalyticsService's GetUsageSummary RPC.
	UsageAnalyticsServiceGetUsageSummaryProcedure = "/trustedai.v1.UsageAnalyticsService/GetUsageSummary"
	// UsageAnalyticsServiceGetUsageDetailsProcedure is the fully-qualified name of the
	// UsageAnalyticsService's GetUsageDetails RPC.
	UsageAnalyticsServiceGetUsageDetailsProcedure = "/trustedai.v1.UsageAnalyticsService/GetUsageDetails"
	// UsageAnalyticsServiceGetUsageCostsProcedure is the fully-qualified name of the
	// UsageAnalyticsService's GetUsageCosts RPC.
	UsageAnalyticsServiceGetUsageCostsProcedure = "/trustedai.v1.UsageAnalyticsService/GetUsageCosts"
	// UsageAnalyticsServiceGetOrganizationUsageSummaryProcedure is the fully-qualified name of the
	// UsageAnalyticsService's GetOrganizationUsageSummary RPC.
	UsageAnalyticsServiceGetOrganizationUsageSummaryProcedure = "/trustedai.v1.UsageAnalyticsService/GetOrganizationUsageSummary"
	// UsageAnalyticsServiceGetOrganizationUsageByUserProcedure is the fully-qualified name of the
	// UsageAnalyticsService's GetOrganizationUsageByUser RPC.
	UsageAnalyticsServiceGetOrganizationUsageByUserProcedure = "/trustedai.v1.UsageAnalyticsService/GetOrganizationUsageByUser"
	// UsageAnalyticsServiceGetOrganizationUsageByModelProcedure is the fully-qualified name of the
	// UsageAnalyticsService's GetOrganizationUsageByModel RPC.
	UsageAnalyticsServiceGetOrganizationUsageByModelProcedure = "/trustedai.v1.UsageAnalyticsService/GetOrganizationUsageByModel"
)

// UsageAnalyticsServiceClient is a client for the trustedai.v1.UsageAnalyticsService service.
type UsageAnalyticsServiceClient interface {
	// User usage queries
	GetUsageSummary(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetUsageSummaryRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageSummaryResponse], error)
	GetUsageDetails(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetUsageDetailsRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageDetailsResponse], error)
	GetUsageCosts(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetUsageCostsRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageCostsResponse], error)
	// Organization reporting (admin only)
	GetOrganizationUsageSummary(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageSummaryRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageSummaryResponse], error)
	GetOrganizationUsageByUser(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageByUserRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageByUserResponse], error)
	GetOrganizationUsageByModel(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageByModelRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageByModelResponse], error)
}

// NewUsageAnalyticsServiceClient constructs a client for the trustedai.v1.UsageAnalyticsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsageAnalyticsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsageAnalyticsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	usageAnalyticsServiceMethods := v1.File_proto_madsrc_trustedai_v1_usage_analytics_proto.Services().ByName("UsageAnalyticsService").Methods()
	return &usageAnalyticsServiceClient{
		getUsageSummary: connect.NewClient[v1.UsageAnalyticsServiceGetUsageSummaryRequest, v1.UsageAnalyticsServiceGetUsageSummaryResponse](
			httpClient,
			baseURL+UsageAnalyticsServiceGetUsageSummaryProcedure,
			connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetUsageSummary")),
			connect.WithClientOptions(opts...),
		),
		getUsageDetails: connect.NewClient[v1.UsageAnalyticsServiceGetUsageDetailsRequest, v1.UsageAnalyticsServiceGetUsageDetailsResponse](
			httpClient,
			baseURL+UsageAnalyticsServiceGetUsageDetailsProcedure,
			connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetUsageDetails")),
			connect.WithClientOptions(opts...),
		),
		getUsageCosts: connect.NewClient[v1.UsageAnalyticsServiceGetUsageCostsRequest, v1.UsageAnalyticsServiceGetUsageCostsResponse](
			httpClient,
			baseURL+UsageAnalyticsServiceGetUsageCostsProcedure,
			connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetUsageCosts")),
			connect.WithClientOptions(opts...),
		),
		getOrganizationUsageSummary: connect.NewClient[v1.UsageAnalyticsServiceGetOrganizationUsageSummaryRequest, v1.UsageAnalyticsServiceGetOrganizationUsageSummaryResponse](
			httpClient,
			baseURL+UsageAnalyticsServiceGetOrganizationUsageSummaryProcedure,
			connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetOrganizationUsageSummary")),
			connect.WithClientOptions(opts...),
		),
		getOrganizationUsageByUser: connect.NewClient[v1.UsageAnalyticsServiceGetOrganizationUsageByUserRequest, v1.UsageAnalyticsServiceGetOrganizationUsageByUserResponse](
			httpClient,
			baseURL+UsageAnalyticsServiceGetOrganizationUsageByUserProcedure,
			connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetOrganizationUsageByUser")),
			connect.WithClientOptions(opts...),
		),
		getOrganizationUsageByModel: connect.NewClient[v1.UsageAnalyticsServiceGetOrganizationUsageByModelRequest, v1.UsageAnalyticsServiceGetOrganizationUsageByModelResponse](
			httpClient,
			baseURL+UsageAnalyticsServiceGetOrganizationUsageByModelProcedure,
			connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetOrganizationUsageByModel")),
			connect.WithClientOptions(opts...),
		),
	}
}

// usageAnalyticsServiceClient implements UsageAnalyticsServiceClient.
type usageAnalyticsServiceClient struct {
	getUsageSummary             *connect.Client[v1.UsageAnalyticsServiceGetUsageSummaryRequest, v1.UsageAnalyticsServiceGetUsageSummaryResponse]
	getUsageDetails             *connect.Client[v1.UsageAnalyticsServiceGetUsageDetailsRequest, v1.UsageAnalyticsServiceGetUsageDetailsResponse]
	getUsageCosts               *connect.Client[v1.UsageAnalyticsServiceGetUsageCostsRequest, v1.UsageAnalyticsServiceGetUsageCostsResponse]
	getOrganizationUsageSummary *connect.Client[v1.UsageAnalyticsServiceGetOrganizationUsageSummaryRequest, v1.UsageAnalyticsServiceGetOrganizationUsageSummaryResponse]
	getOrganizationUsageByUser  *connect.Client[v1.UsageAnalyticsServiceGetOrganizationUsageByUserRequest, v1.UsageAnalyticsServiceGetOrganizationUsageByUserResponse]
	getOrganizationUsageByModel *connect.Client[v1.UsageAnalyticsServiceGetOrganizationUsageByModelRequest, v1.UsageAnalyticsServiceGetOrganizationUsageByModelResponse]
}

// GetUsageSummary calls trustedai.v1.UsageAnalyticsService.GetUsageSummary.
func (c *usageAnalyticsServiceClient) GetUsageSummary(ctx context.Context, req *connect.Request[v1.UsageAnalyticsServiceGetUsageSummaryRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageSummaryResponse], error) {
	return c.getUsageSummary.CallUnary(ctx, req)
}

// GetUsageDetails calls trustedai.v1.UsageAnalyticsService.GetUsageDetails.
func (c *usageAnalyticsServiceClient) GetUsageDetails(ctx context.Context, req *connect.Request[v1.UsageAnalyticsServiceGetUsageDetailsRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageDetailsResponse], error) {
	return c.getUsageDetails.CallUnary(ctx, req)
}

// GetUsageCosts calls trustedai.v1.UsageAnalyticsService.GetUsageCosts.
func (c *usageAnalyticsServiceClient) GetUsageCosts(ctx context.Context, req *connect.Request[v1.UsageAnalyticsServiceGetUsageCostsRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageCostsResponse], error) {
	return c.getUsageCosts.CallUnary(ctx, req)
}

// GetOrganizationUsageSummary calls trustedai.v1.UsageAnalyticsService.GetOrganizationUsageSummary.
func (c *usageAnalyticsServiceClient) GetOrganizationUsageSummary(ctx context.Context, req *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageSummaryRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageSummaryResponse], error) {
	return c.getOrganizationUsageSummary.CallUnary(ctx, req)
}

// GetOrganizationUsageByUser calls trustedai.v1.UsageAnalyticsService.GetOrganizationUsageByUser.
func (c *usageAnalyticsServiceClient) GetOrganizationUsageByUser(ctx context.Context, req *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageByUserRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageByUserResponse], error) {
	return c.getOrganizationUsageByUser.CallUnary(ctx, req)
}

// GetOrganizationUsageByModel calls trustedai.v1.UsageAnalyticsService.GetOrganizationUsageByModel.
func (c *usageAnalyticsServiceClient) GetOrganizationUsageByModel(ctx context.Context, req *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageByModelRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageByModelResponse], error) {
	return c.getOrganizationUsageByModel.CallUnary(ctx, req)
}

// UsageAnalyticsServiceHandler is an implementation of the trustedai.v1.UsageAnalyticsService
// service.
type UsageAnalyticsServiceHandler interface {
	// User usage queries
	GetUsageSummary(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetUsageSummaryRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageSummaryResponse], error)
	GetUsageDetails(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetUsageDetailsRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageDetailsResponse], error)
	GetUsageCosts(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetUsageCostsRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageCostsResponse], error)
	// Organization reporting (admin only)
	GetOrganizationUsageSummary(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageSummaryRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageSummaryResponse], error)
	GetOrganizationUsageByUser(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageByUserRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageByUserResponse], error)
	GetOrganizationUsageByModel(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageByModelRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageByModelResponse], error)
}

// NewUsageAnalyticsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsageAnalyticsServiceHandler(svc UsageAnalyticsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usageAnalyticsServiceMethods := v1.File_proto_madsrc_trustedai_v1_usage_analytics_proto.Services().ByName("UsageAnalyticsService").Methods()
	usageAnalyticsServiceGetUsageSummaryHandler := connect.NewUnaryHandler(
		UsageAnalyticsServiceGetUsageSummaryProcedure,
		svc.GetUsageSummary,
		connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetUsageSummary")),
		connect.WithHandlerOptions(opts...),
	)
	usageAnalyticsServiceGetUsageDetailsHandler := connect.NewUnaryHandler(
		UsageAnalyticsServiceGetUsageDetailsProcedure,
		svc.GetUsageDetails,
		connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetUsageDetails")),
		connect.WithHandlerOptions(opts...),
	)
	usageAnalyticsServiceGetUsageCostsHandler := connect.NewUnaryHandler(
		UsageAnalyticsServiceGetUsageCostsProcedure,
		svc.GetUsageCosts,
		connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetUsageCosts")),
		connect.WithHandlerOptions(opts...),
	)
	usageAnalyticsServiceGetOrganizationUsageSummaryHandler := connect.NewUnaryHandler(
		UsageAnalyticsServiceGetOrganizationUsageSummaryProcedure,
		svc.GetOrganizationUsageSummary,
		connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetOrganizationUsageSummary")),
		connect.WithHandlerOptions(opts...),
	)
	usageAnalyticsServiceGetOrganizationUsageByUserHandler := connect.NewUnaryHandler(
		UsageAnalyticsServiceGetOrganizationUsageByUserProcedure,
		svc.GetOrganizationUsageByUser,
		connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetOrganizationUsageByUser")),
		connect.WithHandlerOptions(opts...),
	)
	usageAnalyticsServiceGetOrganizationUsageByModelHandler := connect.NewUnaryHandler(
		UsageAnalyticsServiceGetOrganizationUsageByModelProcedure,
		svc.GetOrganizationUsageByModel,
		connect.WithSchema(usageAnalyticsServiceMethods.ByName("GetOrganizationUsageByModel")),
		connect.WithHandlerOptions(opts...),
	)
	return "/trustedai.v1.UsageAnalyticsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsageAnalyticsServiceGetUsageSummaryProcedure:
			usageAnalyticsServiceGetUsageSummaryHandler.ServeHTTP(w, r)
		case UsageAnalyticsServiceGetUsageDetailsProcedure:
			usageAnalyticsServiceGetUsageDetailsHandler.ServeHTTP(w, r)
		case UsageAnalyticsServiceGetUsageCostsProcedure:
			usageAnalyticsServiceGetUsageCostsHandler.ServeHTTP(w, r)
		case UsageAnalyticsServiceGetOrganizationUsageSummaryProcedure:
			usageAnalyticsServiceGetOrganizationUsageSummaryHandler.ServeHTTP(w, r)
		case UsageAnalyticsServiceGetOrganizationUsageByUserProcedure:
			usageAnalyticsServiceGetOrganizationUsageByUserHandler.ServeHTTP(w, r)
		case UsageAnalyticsServiceGetOrganizationUsageByModelProcedure:
			usageAnalyticsServiceGetOrganizationUsageByModelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsageAnalyticsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsageAnalyticsServiceHandler struct{}

func (UnimplementedUsageAnalyticsServiceHandler) GetUsageSummary(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetUsageSummaryRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("trustedai.v1.UsageAnalyticsService.GetUsageSummary is not implemented"))
}

func (UnimplementedUsageAnalyticsServiceHandler) GetUsageDetails(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetUsageDetailsRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("trustedai.v1.UsageAnalyticsService.GetUsageDetails is not implemented"))
}

func (UnimplementedUsageAnalyticsServiceHandler) GetUsageCosts(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetUsageCostsRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetUsageCostsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("trustedai.v1.UsageAnalyticsService.GetUsageCosts is not implemented"))
}

func (UnimplementedUsageAnalyticsServiceHandler) GetOrganizationUsageSummary(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageSummaryRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("trustedai.v1.UsageAnalyticsService.GetOrganizationUsageSummary is not implemented"))
}

func (UnimplementedUsageAnalyticsServiceHandler) GetOrganizationUsageByUser(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageByUserRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageByUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("trustedai.v1.UsageAnalyticsService.GetOrganizationUsageByUser is not implemented"))
}

func (UnimplementedUsageAnalyticsServiceHandler) GetOrganizationUsageByModel(context.Context, *connect.Request[v1.UsageAnalyticsServiceGetOrganizationUsageByModelRequest]) (*connect.Response[v1.UsageAnalyticsServiceGetOrganizationUsageByModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("trustedai.v1.UsageAnalyticsService.GetOrganizationUsageByModel is not implemented"))
}
