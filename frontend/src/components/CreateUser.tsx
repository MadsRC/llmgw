// SPDX-FileCopyrightText: 2025 Mads R. Havmand <mads@v42.dk>
//
// SPDX-License-Identifier: AGPL-3.0-only

import React, { useState, useEffect } from "react";
import { iamClient } from "../services/api";
import { isCurrentUserAdmin } from "../utils/auth";
import { Organization, User } from "../types";

interface CreateUserProps {
  isOpen: boolean;
  onClose: () => void;
  onUserCreated: (user: User) => void;
}

const CreateUser: React.FC<CreateUserProps> = ({
  isOpen,
  onClose,
  onUserCreated,
}) => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [selectedOrgId, setSelectedOrgId] = useState("");
  const [systemAdmin, setSystemAdmin] = useState(false);
  const [provider, setProvider] = useState("manual");
  const [externalId, setExternalId] = useState("");
  const [organizations, setOrganizations] = useState<Organization[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const isAdmin = isCurrentUserAdmin();

  useEffect(() => {
    if (isOpen) {
      fetchOrganizations();
    }
  }, [isOpen]);

  const fetchOrganizations = async () => {
    try {
      setLoading(true);
      const response = await iamClient.listOrganizations({});
      setOrganizations(response.organizations);
      if (response.organizations.length > 0) {
        setSelectedOrgId(response.organizations[0].id);
      }
    } catch (err) {
      setError("Failed to load organizations");
      console.error("Fetch organizations error:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateUser = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    if (!name.trim()) {
      setError("Name is required");
      return;
    }

    if (!email.trim()) {
      setError("Email is required");
      return;
    }

    if (!selectedOrgId) {
      setError("Organization is required");
      return;
    }

    // Basic email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email.trim())) {
      setError("Please enter a valid email address");
      return;
    }

    setLoading(true);

    try {
      const response = await iamClient.createUser({
        user: {
          id: "", // Will be generated by the server
          name: name.trim(),
          email: email.trim(),
          organizationId: selectedOrgId,
          externalId: externalId.trim() || "",
          provider: provider,
          systemAdmin: systemAdmin,
          createdAt: undefined, // Will be set by server
          lastLogin: undefined,
        },
      });

      if (response.user) {
        onUserCreated(response.user);
        handleClose();
      } else {
        setError("Failed to create user. Server response was incomplete.");
      }
    } catch (err: any) {
      if (err?.message?.includes("403") || err?.code === "permission_denied") {
        setError("Access denied. You do not have permission to create users.");
      } else if (
        err?.message?.includes("409") ||
        err?.message?.includes("already exists")
      ) {
        setError("A user with this email already exists.");
      } else {
        setError("Failed to create user. Please try again.");
      }
      console.error("Create user error:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setName("");
    setEmail("");
    setSelectedOrgId("");
    setSystemAdmin(false);
    setProvider("manual");
    setExternalId("");
    setError(null);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50">
      <div className="bg-black border border-green-500 rounded-lg p-6 w-full max-w-md mx-4">
        <h2
          className="text-xl font-semibold text-green-400 mb-4"
          style={{ fontFamily: "monospace" }}
        >
          {">"} CREATE NEW USER TERMINAL
        </h2>

        <form onSubmit={handleCreateUser} className="space-y-4">
          {error && (
            <div className="bg-red-900 border border-red-500 rounded p-3">
              <div
                className="text-red-300 text-sm"
                style={{ fontFamily: "monospace" }}
              >
                {">"} ERROR: {error}
              </div>
            </div>
          )}

          <div>
            <label
              className="block text-sm font-medium text-green-400 mb-1"
              style={{ fontFamily: "monospace" }}
            >
              {">"} NAME: *
            </label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full border border-green-500 bg-black text-green-300 px-3 py-2 rounded focus:outline-none focus:border-green-300 focus:shadow-lg focus:shadow-green-500/30 transition-all"
              style={{ fontFamily: "monospace" }}
              placeholder="Enter user name..."
              required
            />
          </div>

          <div>
            <label
              className="block text-sm font-medium text-green-400 mb-1"
              style={{ fontFamily: "monospace" }}
            >
              {">"} EMAIL: *
            </label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full border border-green-500 bg-black text-green-300 px-3 py-2 rounded focus:outline-none focus:border-green-300 focus:shadow-lg focus:shadow-green-500/30 transition-all"
              style={{ fontFamily: "monospace" }}
              placeholder="user@domain.com"
              required
            />
          </div>

          <div>
            <label
              className="block text-sm font-medium text-green-400 mb-1"
              style={{ fontFamily: "monospace" }}
            >
              {">"} ORGANIZATION: *
            </label>
            <select
              value={selectedOrgId}
              onChange={(e) => setSelectedOrgId(e.target.value)}
              className="w-full border border-green-500 bg-black text-green-300 px-3 py-2 rounded focus:outline-none focus:border-green-300 focus:shadow-lg focus:shadow-green-500/30 transition-all"
              style={{ fontFamily: "monospace" }}
              required
            >
              <option
                value=""
                style={{ backgroundColor: "#000", color: "#4ade80" }}
              >
                Select organization...
              </option>
              {organizations.map((org) => (
                <option
                  key={org.id}
                  value={org.id}
                  style={{ backgroundColor: "#000", color: "#4ade80" }}
                >
                  {org.displayName || org.name}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label
              className="block text-sm font-medium text-green-400 mb-1"
              style={{ fontFamily: "monospace" }}
            >
              {">"} PROVIDER:
            </label>
            <select
              value={provider}
              onChange={(e) => setProvider(e.target.value)}
              className="w-full border border-green-500 bg-black text-green-300 px-3 py-2 rounded focus:outline-none focus:border-green-300 focus:shadow-lg focus:shadow-green-500/30 transition-all"
              style={{ fontFamily: "monospace" }}
            >
              <option
                value="manual"
                style={{ backgroundColor: "#000", color: "#4ade80" }}
              >
                MANUAL
              </option>
              <option
                value="oidc"
                style={{ backgroundColor: "#000", color: "#4ade80" }}
              >
                OIDC/SSO
              </option>
            </select>
          </div>

          {provider === "oidc" && (
            <div>
              <label
                className="block text-sm font-medium text-green-400 mb-1"
                style={{ fontFamily: "monospace" }}
              >
                {">"} EXTERNAL ID:
              </label>
              <input
                type="text"
                value={externalId}
                onChange={(e) => setExternalId(e.target.value)}
                className="w-full border border-green-500 bg-black text-green-300 px-3 py-2 rounded focus:outline-none focus:border-green-300 focus:shadow-lg focus:shadow-green-500/30 transition-all"
                style={{ fontFamily: "monospace" }}
                placeholder="SSO provider user ID"
              />
              <p
                className="text-xs text-green-600 mt-1"
                style={{ fontFamily: "monospace" }}
              >
                {">>"} The user ID from the SSO provider
              </p>
            </div>
          )}

          {isAdmin && (
            <div className="flex items-center">
              <input
                type="checkbox"
                id="systemAdmin"
                checked={systemAdmin}
                onChange={(e) => setSystemAdmin(e.target.checked)}
                className="h-4 w-4 text-green-600 bg-black border-green-500 rounded focus:ring-green-500"
              />
              <label
                htmlFor="systemAdmin"
                className="ml-2 text-sm text-green-400"
                style={{ fontFamily: "monospace" }}
              >
                [SYSTEM ADMINISTRATOR]
              </label>
            </div>
          )}

          <div className="flex space-x-3 pt-4">
            <button
              type="button"
              onClick={handleClose}
              className="flex-1 px-4 py-2 text-red-400 border border-red-500 rounded hover:bg-red-900 hover:text-red-300 bg-black transition-all"
              style={{ fontFamily: "monospace" }}
            >
              [CANCEL]
            </button>
            <button
              type="submit"
              disabled={loading}
              className="flex-1 px-4 py-2 bg-green-500 text-white border border-green-500 rounded hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
              style={{ fontFamily: "monospace" }}
            >
              {loading ? (
                <span className="flex items-center justify-center">
                  <span className="animate-spin mr-2">⟳</span>
                  CREATING...
                </span>
              ) : (
                "[CREATE USER]"
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateUser;
