// SPDX-FileCopyrightText: 2025 Mads R. Havmand <mads@v42.dk>
//
// SPDX-License-Identifier: AGPL-3.0-only

// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file proto/madsrc/llmgw/v1/iam.proto (package llmgw.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message llmgw.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string organization_id = 4;
   */
  organizationId = "";

  /**
   * @generated from field: string external_id = 5;
   */
  externalId = "";

  /**
   * @generated from field: string provider = 6;
   */
  provider = "";

  /**
   * @generated from field: bool system_admin = 7;
   */
  systemAdmin = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp last_login = 9;
   */
  lastLogin?: Timestamp;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: "organization_id",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 5,
      name: "external_id",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 6, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "system_admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "created_at", kind: "message", T: Timestamp },
    { no: 9, name: "last_login", kind: "message", T: Timestamp },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(
    a: User | PlainMessage<User> | undefined,
    b: User | PlainMessage<User> | undefined,
  ): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message llmgw.v1.Organization
 */
export class Organization extends Message<Organization> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * @generated from field: bool is_system = 4;
   */
  isSystem = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: string sso_type = 6;
   */
  ssoType = "";

  /**
   * Serialized JSON configuration
   *
   * @generated from field: string sso_config = 7;
   */
  ssoConfig = "";

  constructor(data?: PartialMessage<Organization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.Organization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: "display_name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 4, name: "is_system", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "sso_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "sso_config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Organization {
    return new Organization().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Organization {
    return new Organization().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Organization {
    return new Organization().fromJsonString(jsonString, options);
  }

  static equals(
    a: Organization | PlainMessage<Organization> | undefined,
    b: Organization | PlainMessage<Organization> | undefined,
  ): boolean {
    return proto3.util.equals(Organization, a, b);
  }
}

/**
 * @generated from message llmgw.v1.APIToken
 */
export class APIToken extends Message<APIToken> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp expires_at = 5;
   */
  expiresAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp last_used_at = 6;
   */
  lastUsedAt?: Timestamp;

  constructor(data?: PartialMessage<APIToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.APIToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: "description",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "expires_at", kind: "message", T: Timestamp },
    { no: 6, name: "last_used_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): APIToken {
    return new APIToken().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): APIToken {
    return new APIToken().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): APIToken {
    return new APIToken().fromJsonString(jsonString, options);
  }

  static equals(
    a: APIToken | PlainMessage<APIToken> | undefined,
    b: APIToken | PlainMessage<APIToken> | undefined,
  ): boolean {
    return proto3.util.equals(APIToken, a, b);
  }
}

/**
 * User Service Messages
 *
 * @generated from message llmgw.v1.IAMServiceCreateUserRequest
 */
export class IAMServiceCreateUserRequest extends Message<IAMServiceCreateUserRequest> {
  /**
   * @generated from field: llmgw.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<IAMServiceCreateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceCreateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceCreateUserRequest {
    return new IAMServiceCreateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateUserRequest {
    return new IAMServiceCreateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateUserRequest {
    return new IAMServiceCreateUserRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceCreateUserRequest
      | PlainMessage<IAMServiceCreateUserRequest>
      | undefined,
    b:
      | IAMServiceCreateUserRequest
      | PlainMessage<IAMServiceCreateUserRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceCreateUserRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceCreateUserResponse
 */
export class IAMServiceCreateUserResponse extends Message<IAMServiceCreateUserResponse> {
  /**
   * @generated from field: llmgw.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<IAMServiceCreateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceCreateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceCreateUserResponse {
    return new IAMServiceCreateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateUserResponse {
    return new IAMServiceCreateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateUserResponse {
    return new IAMServiceCreateUserResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceCreateUserResponse
      | PlainMessage<IAMServiceCreateUserResponse>
      | undefined,
    b:
      | IAMServiceCreateUserResponse
      | PlainMessage<IAMServiceCreateUserResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceCreateUserResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetUserRequest
 */
export class IAMServiceGetUserRequest extends Message<IAMServiceGetUserRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<IAMServiceGetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetUserRequest {
    return new IAMServiceGetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserRequest {
    return new IAMServiceGetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserRequest {
    return new IAMServiceGetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | IAMServiceGetUserRequest
      | PlainMessage<IAMServiceGetUserRequest>
      | undefined,
    b:
      | IAMServiceGetUserRequest
      | PlainMessage<IAMServiceGetUserRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetUserRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetUserResponse
 */
export class IAMServiceGetUserResponse extends Message<IAMServiceGetUserResponse> {
  /**
   * @generated from field: llmgw.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<IAMServiceGetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetUserResponse {
    return new IAMServiceGetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserResponse {
    return new IAMServiceGetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserResponse {
    return new IAMServiceGetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | IAMServiceGetUserResponse
      | PlainMessage<IAMServiceGetUserResponse>
      | undefined,
    b:
      | IAMServiceGetUserResponse
      | PlainMessage<IAMServiceGetUserResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetUserResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetUserByEmailRequest
 */
export class IAMServiceGetUserByEmailRequest extends Message<IAMServiceGetUserByEmailRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<IAMServiceGetUserByEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetUserByEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetUserByEmailRequest {
    return new IAMServiceGetUserByEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserByEmailRequest {
    return new IAMServiceGetUserByEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserByEmailRequest {
    return new IAMServiceGetUserByEmailRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceGetUserByEmailRequest
      | PlainMessage<IAMServiceGetUserByEmailRequest>
      | undefined,
    b:
      | IAMServiceGetUserByEmailRequest
      | PlainMessage<IAMServiceGetUserByEmailRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetUserByEmailRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetUserByEmailResponse
 */
export class IAMServiceGetUserByEmailResponse extends Message<IAMServiceGetUserByEmailResponse> {
  /**
   * @generated from field: llmgw.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<IAMServiceGetUserByEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetUserByEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetUserByEmailResponse {
    return new IAMServiceGetUserByEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserByEmailResponse {
    return new IAMServiceGetUserByEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserByEmailResponse {
    return new IAMServiceGetUserByEmailResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceGetUserByEmailResponse
      | PlainMessage<IAMServiceGetUserByEmailResponse>
      | undefined,
    b:
      | IAMServiceGetUserByEmailResponse
      | PlainMessage<IAMServiceGetUserByEmailResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetUserByEmailResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetUserByExternalIDRequest
 */
export class IAMServiceGetUserByExternalIDRequest extends Message<IAMServiceGetUserByExternalIDRequest> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  /**
   * @generated from field: string external_id = 2;
   */
  externalId = "";

  constructor(data?: PartialMessage<IAMServiceGetUserByExternalIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetUserByExternalIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: "external_id",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetUserByExternalIDRequest {
    return new IAMServiceGetUserByExternalIDRequest().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserByExternalIDRequest {
    return new IAMServiceGetUserByExternalIDRequest().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserByExternalIDRequest {
    return new IAMServiceGetUserByExternalIDRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceGetUserByExternalIDRequest
      | PlainMessage<IAMServiceGetUserByExternalIDRequest>
      | undefined,
    b:
      | IAMServiceGetUserByExternalIDRequest
      | PlainMessage<IAMServiceGetUserByExternalIDRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetUserByExternalIDRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetUserByExternalIDResponse
 */
export class IAMServiceGetUserByExternalIDResponse extends Message<IAMServiceGetUserByExternalIDResponse> {
  /**
   * @generated from field: llmgw.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<IAMServiceGetUserByExternalIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetUserByExternalIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetUserByExternalIDResponse {
    return new IAMServiceGetUserByExternalIDResponse().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserByExternalIDResponse {
    return new IAMServiceGetUserByExternalIDResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetUserByExternalIDResponse {
    return new IAMServiceGetUserByExternalIDResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceGetUserByExternalIDResponse
      | PlainMessage<IAMServiceGetUserByExternalIDResponse>
      | undefined,
    b:
      | IAMServiceGetUserByExternalIDResponse
      | PlainMessage<IAMServiceGetUserByExternalIDResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetUserByExternalIDResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetCurrentUserRequest
 */
export class IAMServiceGetCurrentUserRequest extends Message<IAMServiceGetCurrentUserRequest> {
  constructor(data?: PartialMessage<IAMServiceGetCurrentUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetCurrentUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetCurrentUserRequest {
    return new IAMServiceGetCurrentUserRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetCurrentUserRequest {
    return new IAMServiceGetCurrentUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetCurrentUserRequest {
    return new IAMServiceGetCurrentUserRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceGetCurrentUserRequest
      | PlainMessage<IAMServiceGetCurrentUserRequest>
      | undefined,
    b:
      | IAMServiceGetCurrentUserRequest
      | PlainMessage<IAMServiceGetCurrentUserRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetCurrentUserRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetCurrentUserResponse
 */
export class IAMServiceGetCurrentUserResponse extends Message<IAMServiceGetCurrentUserResponse> {
  /**
   * @generated from field: llmgw.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<IAMServiceGetCurrentUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetCurrentUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetCurrentUserResponse {
    return new IAMServiceGetCurrentUserResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetCurrentUserResponse {
    return new IAMServiceGetCurrentUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetCurrentUserResponse {
    return new IAMServiceGetCurrentUserResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceGetCurrentUserResponse
      | PlainMessage<IAMServiceGetCurrentUserResponse>
      | undefined,
    b:
      | IAMServiceGetCurrentUserResponse
      | PlainMessage<IAMServiceGetCurrentUserResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetCurrentUserResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceListUsersByOrganizationRequest
 */
export class IAMServiceListUsersByOrganizationRequest extends Message<IAMServiceListUsersByOrganizationRequest> {
  /**
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  constructor(data?: PartialMessage<IAMServiceListUsersByOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    "llmgw.v1.IAMServiceListUsersByOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "organization_id",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceListUsersByOrganizationRequest {
    return new IAMServiceListUsersByOrganizationRequest().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListUsersByOrganizationRequest {
    return new IAMServiceListUsersByOrganizationRequest().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListUsersByOrganizationRequest {
    return new IAMServiceListUsersByOrganizationRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceListUsersByOrganizationRequest
      | PlainMessage<IAMServiceListUsersByOrganizationRequest>
      | undefined,
    b:
      | IAMServiceListUsersByOrganizationRequest
      | PlainMessage<IAMServiceListUsersByOrganizationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceListUsersByOrganizationRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceListUsersByOrganizationResponse
 */
export class IAMServiceListUsersByOrganizationResponse extends Message<IAMServiceListUsersByOrganizationResponse> {
  /**
   * @generated from field: repeated llmgw.v1.User users = 1;
   */
  users: User[] = [];

  constructor(
    data?: PartialMessage<IAMServiceListUsersByOrganizationResponse>,
  ) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    "llmgw.v1.IAMServiceListUsersByOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceListUsersByOrganizationResponse {
    return new IAMServiceListUsersByOrganizationResponse().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListUsersByOrganizationResponse {
    return new IAMServiceListUsersByOrganizationResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListUsersByOrganizationResponse {
    return new IAMServiceListUsersByOrganizationResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceListUsersByOrganizationResponse
      | PlainMessage<IAMServiceListUsersByOrganizationResponse>
      | undefined,
    b:
      | IAMServiceListUsersByOrganizationResponse
      | PlainMessage<IAMServiceListUsersByOrganizationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceListUsersByOrganizationResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceUpdateUserRequest
 */
export class IAMServiceUpdateUserRequest extends Message<IAMServiceUpdateUserRequest> {
  /**
   * @generated from field: llmgw.v1.User user = 1;
   */
  user?: User;

  /**
   * @generated from field: bool has_system_admin = 2;
   */
  hasSystemAdmin = false;

  constructor(data?: PartialMessage<IAMServiceUpdateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceUpdateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    {
      no: 2,
      name: "has_system_admin",
      kind: "scalar",
      T: 8 /* ScalarType.BOOL */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceUpdateUserRequest {
    return new IAMServiceUpdateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceUpdateUserRequest {
    return new IAMServiceUpdateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceUpdateUserRequest {
    return new IAMServiceUpdateUserRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceUpdateUserRequest
      | PlainMessage<IAMServiceUpdateUserRequest>
      | undefined,
    b:
      | IAMServiceUpdateUserRequest
      | PlainMessage<IAMServiceUpdateUserRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceUpdateUserRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceUpdateUserResponse
 */
export class IAMServiceUpdateUserResponse extends Message<IAMServiceUpdateUserResponse> {
  /**
   * @generated from field: llmgw.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<IAMServiceUpdateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceUpdateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceUpdateUserResponse {
    return new IAMServiceUpdateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceUpdateUserResponse {
    return new IAMServiceUpdateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceUpdateUserResponse {
    return new IAMServiceUpdateUserResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceUpdateUserResponse
      | PlainMessage<IAMServiceUpdateUserResponse>
      | undefined,
    b:
      | IAMServiceUpdateUserResponse
      | PlainMessage<IAMServiceUpdateUserResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceUpdateUserResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceDeleteUserRequest
 */
export class IAMServiceDeleteUserRequest extends Message<IAMServiceDeleteUserRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<IAMServiceDeleteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceDeleteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceDeleteUserRequest {
    return new IAMServiceDeleteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceDeleteUserRequest {
    return new IAMServiceDeleteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceDeleteUserRequest {
    return new IAMServiceDeleteUserRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceDeleteUserRequest
      | PlainMessage<IAMServiceDeleteUserRequest>
      | undefined,
    b:
      | IAMServiceDeleteUserRequest
      | PlainMessage<IAMServiceDeleteUserRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceDeleteUserRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceDeleteUserResponse
 */
export class IAMServiceDeleteUserResponse extends Message<IAMServiceDeleteUserResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<IAMServiceDeleteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceDeleteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceDeleteUserResponse {
    return new IAMServiceDeleteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceDeleteUserResponse {
    return new IAMServiceDeleteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceDeleteUserResponse {
    return new IAMServiceDeleteUserResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceDeleteUserResponse
      | PlainMessage<IAMServiceDeleteUserResponse>
      | undefined,
    b:
      | IAMServiceDeleteUserResponse
      | PlainMessage<IAMServiceDeleteUserResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceDeleteUserResponse, a, b);
  }
}

/**
 * Organization Service Messages
 *
 * @generated from message llmgw.v1.IAMServiceCreateOrganizationRequest
 */
export class IAMServiceCreateOrganizationRequest extends Message<IAMServiceCreateOrganizationRequest> {
  /**
   * @generated from field: llmgw.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<IAMServiceCreateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceCreateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceCreateOrganizationRequest {
    return new IAMServiceCreateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateOrganizationRequest {
    return new IAMServiceCreateOrganizationRequest().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateOrganizationRequest {
    return new IAMServiceCreateOrganizationRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceCreateOrganizationRequest
      | PlainMessage<IAMServiceCreateOrganizationRequest>
      | undefined,
    b:
      | IAMServiceCreateOrganizationRequest
      | PlainMessage<IAMServiceCreateOrganizationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceCreateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceCreateOrganizationResponse
 */
export class IAMServiceCreateOrganizationResponse extends Message<IAMServiceCreateOrganizationResponse> {
  /**
   * @generated from field: llmgw.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<IAMServiceCreateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceCreateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceCreateOrganizationResponse {
    return new IAMServiceCreateOrganizationResponse().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateOrganizationResponse {
    return new IAMServiceCreateOrganizationResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateOrganizationResponse {
    return new IAMServiceCreateOrganizationResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceCreateOrganizationResponse
      | PlainMessage<IAMServiceCreateOrganizationResponse>
      | undefined,
    b:
      | IAMServiceCreateOrganizationResponse
      | PlainMessage<IAMServiceCreateOrganizationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceCreateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetOrganizationRequest
 */
export class IAMServiceGetOrganizationRequest extends Message<IAMServiceGetOrganizationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<IAMServiceGetOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetOrganizationRequest {
    return new IAMServiceGetOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetOrganizationRequest {
    return new IAMServiceGetOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetOrganizationRequest {
    return new IAMServiceGetOrganizationRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceGetOrganizationRequest
      | PlainMessage<IAMServiceGetOrganizationRequest>
      | undefined,
    b:
      | IAMServiceGetOrganizationRequest
      | PlainMessage<IAMServiceGetOrganizationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetOrganizationRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetOrganizationResponse
 */
export class IAMServiceGetOrganizationResponse extends Message<IAMServiceGetOrganizationResponse> {
  /**
   * @generated from field: llmgw.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<IAMServiceGetOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetOrganizationResponse {
    return new IAMServiceGetOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetOrganizationResponse {
    return new IAMServiceGetOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetOrganizationResponse {
    return new IAMServiceGetOrganizationResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceGetOrganizationResponse
      | PlainMessage<IAMServiceGetOrganizationResponse>
      | undefined,
    b:
      | IAMServiceGetOrganizationResponse
      | PlainMessage<IAMServiceGetOrganizationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetOrganizationResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetOrganizationByNameRequest
 */
export class IAMServiceGetOrganizationByNameRequest extends Message<IAMServiceGetOrganizationByNameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<IAMServiceGetOrganizationByNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetOrganizationByNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetOrganizationByNameRequest {
    return new IAMServiceGetOrganizationByNameRequest().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetOrganizationByNameRequest {
    return new IAMServiceGetOrganizationByNameRequest().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetOrganizationByNameRequest {
    return new IAMServiceGetOrganizationByNameRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceGetOrganizationByNameRequest
      | PlainMessage<IAMServiceGetOrganizationByNameRequest>
      | undefined,
    b:
      | IAMServiceGetOrganizationByNameRequest
      | PlainMessage<IAMServiceGetOrganizationByNameRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetOrganizationByNameRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceGetOrganizationByNameResponse
 */
export class IAMServiceGetOrganizationByNameResponse extends Message<IAMServiceGetOrganizationByNameResponse> {
  /**
   * @generated from field: llmgw.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<IAMServiceGetOrganizationByNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceGetOrganizationByNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceGetOrganizationByNameResponse {
    return new IAMServiceGetOrganizationByNameResponse().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetOrganizationByNameResponse {
    return new IAMServiceGetOrganizationByNameResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceGetOrganizationByNameResponse {
    return new IAMServiceGetOrganizationByNameResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceGetOrganizationByNameResponse
      | PlainMessage<IAMServiceGetOrganizationByNameResponse>
      | undefined,
    b:
      | IAMServiceGetOrganizationByNameResponse
      | PlainMessage<IAMServiceGetOrganizationByNameResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceGetOrganizationByNameResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceListOrganizationsRequest
 */
export class IAMServiceListOrganizationsRequest extends Message<IAMServiceListOrganizationsRequest> {
  constructor(data?: PartialMessage<IAMServiceListOrganizationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceListOrganizationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceListOrganizationsRequest {
    return new IAMServiceListOrganizationsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListOrganizationsRequest {
    return new IAMServiceListOrganizationsRequest().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListOrganizationsRequest {
    return new IAMServiceListOrganizationsRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceListOrganizationsRequest
      | PlainMessage<IAMServiceListOrganizationsRequest>
      | undefined,
    b:
      | IAMServiceListOrganizationsRequest
      | PlainMessage<IAMServiceListOrganizationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceListOrganizationsRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceListOrganizationsResponse
 */
export class IAMServiceListOrganizationsResponse extends Message<IAMServiceListOrganizationsResponse> {
  /**
   * @generated from field: repeated llmgw.v1.Organization organizations = 1;
   */
  organizations: Organization[] = [];

  constructor(data?: PartialMessage<IAMServiceListOrganizationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceListOrganizationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "organizations",
      kind: "message",
      T: Organization,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceListOrganizationsResponse {
    return new IAMServiceListOrganizationsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListOrganizationsResponse {
    return new IAMServiceListOrganizationsResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListOrganizationsResponse {
    return new IAMServiceListOrganizationsResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceListOrganizationsResponse
      | PlainMessage<IAMServiceListOrganizationsResponse>
      | undefined,
    b:
      | IAMServiceListOrganizationsResponse
      | PlainMessage<IAMServiceListOrganizationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceListOrganizationsResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceUpdateOrganizationRequest
 */
export class IAMServiceUpdateOrganizationRequest extends Message<IAMServiceUpdateOrganizationRequest> {
  /**
   * @generated from field: llmgw.v1.Organization organization = 1;
   */
  organization?: Organization;

  /**
   * @generated from field: bool has_is_system = 2;
   */
  hasIsSystem = false;

  constructor(data?: PartialMessage<IAMServiceUpdateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceUpdateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
    {
      no: 2,
      name: "has_is_system",
      kind: "scalar",
      T: 8 /* ScalarType.BOOL */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceUpdateOrganizationRequest {
    return new IAMServiceUpdateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceUpdateOrganizationRequest {
    return new IAMServiceUpdateOrganizationRequest().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceUpdateOrganizationRequest {
    return new IAMServiceUpdateOrganizationRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceUpdateOrganizationRequest
      | PlainMessage<IAMServiceUpdateOrganizationRequest>
      | undefined,
    b:
      | IAMServiceUpdateOrganizationRequest
      | PlainMessage<IAMServiceUpdateOrganizationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceUpdateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceUpdateOrganizationResponse
 */
export class IAMServiceUpdateOrganizationResponse extends Message<IAMServiceUpdateOrganizationResponse> {
  /**
   * @generated from field: llmgw.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<IAMServiceUpdateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceUpdateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceUpdateOrganizationResponse {
    return new IAMServiceUpdateOrganizationResponse().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceUpdateOrganizationResponse {
    return new IAMServiceUpdateOrganizationResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceUpdateOrganizationResponse {
    return new IAMServiceUpdateOrganizationResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceUpdateOrganizationResponse
      | PlainMessage<IAMServiceUpdateOrganizationResponse>
      | undefined,
    b:
      | IAMServiceUpdateOrganizationResponse
      | PlainMessage<IAMServiceUpdateOrganizationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceUpdateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceDeleteOrganizationRequest
 */
export class IAMServiceDeleteOrganizationRequest extends Message<IAMServiceDeleteOrganizationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: bool force = 2;
   */
  force = false;

  constructor(data?: PartialMessage<IAMServiceDeleteOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceDeleteOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceDeleteOrganizationRequest {
    return new IAMServiceDeleteOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceDeleteOrganizationRequest {
    return new IAMServiceDeleteOrganizationRequest().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceDeleteOrganizationRequest {
    return new IAMServiceDeleteOrganizationRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceDeleteOrganizationRequest
      | PlainMessage<IAMServiceDeleteOrganizationRequest>
      | undefined,
    b:
      | IAMServiceDeleteOrganizationRequest
      | PlainMessage<IAMServiceDeleteOrganizationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceDeleteOrganizationRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceDeleteOrganizationResponse
 */
export class IAMServiceDeleteOrganizationResponse extends Message<IAMServiceDeleteOrganizationResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<IAMServiceDeleteOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceDeleteOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceDeleteOrganizationResponse {
    return new IAMServiceDeleteOrganizationResponse().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceDeleteOrganizationResponse {
    return new IAMServiceDeleteOrganizationResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceDeleteOrganizationResponse {
    return new IAMServiceDeleteOrganizationResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceDeleteOrganizationResponse
      | PlainMessage<IAMServiceDeleteOrganizationResponse>
      | undefined,
    b:
      | IAMServiceDeleteOrganizationResponse
      | PlainMessage<IAMServiceDeleteOrganizationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceDeleteOrganizationResponse, a, b);
  }
}

/**
 * Token Service Messages
 *
 * @generated from message llmgw.v1.IAMServiceCreateTokenRequest
 */
export class IAMServiceCreateTokenRequest extends Message<IAMServiceCreateTokenRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: google.protobuf.Timestamp expires_at = 3;
   */
  expiresAt?: Timestamp;

  constructor(data?: PartialMessage<IAMServiceCreateTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceCreateTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: "description",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 3, name: "expires_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceCreateTokenRequest {
    return new IAMServiceCreateTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateTokenRequest {
    return new IAMServiceCreateTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateTokenRequest {
    return new IAMServiceCreateTokenRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceCreateTokenRequest
      | PlainMessage<IAMServiceCreateTokenRequest>
      | undefined,
    b:
      | IAMServiceCreateTokenRequest
      | PlainMessage<IAMServiceCreateTokenRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceCreateTokenRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceCreateTokenResponse
 */
export class IAMServiceCreateTokenResponse extends Message<IAMServiceCreateTokenResponse> {
  /**
   * @generated from field: llmgw.v1.APIToken token = 1;
   */
  token?: APIToken;

  /**
   * @generated from field: string raw_token = 2;
   */
  rawToken = "";

  constructor(data?: PartialMessage<IAMServiceCreateTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceCreateTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: APIToken },
    { no: 2, name: "raw_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceCreateTokenResponse {
    return new IAMServiceCreateTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateTokenResponse {
    return new IAMServiceCreateTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceCreateTokenResponse {
    return new IAMServiceCreateTokenResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceCreateTokenResponse
      | PlainMessage<IAMServiceCreateTokenResponse>
      | undefined,
    b:
      | IAMServiceCreateTokenResponse
      | PlainMessage<IAMServiceCreateTokenResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceCreateTokenResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceListUserTokensRequest
 */
export class IAMServiceListUserTokensRequest extends Message<IAMServiceListUserTokensRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<IAMServiceListUserTokensRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceListUserTokensRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceListUserTokensRequest {
    return new IAMServiceListUserTokensRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListUserTokensRequest {
    return new IAMServiceListUserTokensRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListUserTokensRequest {
    return new IAMServiceListUserTokensRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceListUserTokensRequest
      | PlainMessage<IAMServiceListUserTokensRequest>
      | undefined,
    b:
      | IAMServiceListUserTokensRequest
      | PlainMessage<IAMServiceListUserTokensRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceListUserTokensRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceListUserTokensResponse
 */
export class IAMServiceListUserTokensResponse extends Message<IAMServiceListUserTokensResponse> {
  /**
   * @generated from field: repeated llmgw.v1.APIToken tokens = 1;
   */
  tokens: APIToken[] = [];

  constructor(data?: PartialMessage<IAMServiceListUserTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceListUserTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens", kind: "message", T: APIToken, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceListUserTokensResponse {
    return new IAMServiceListUserTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListUserTokensResponse {
    return new IAMServiceListUserTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceListUserTokensResponse {
    return new IAMServiceListUserTokensResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceListUserTokensResponse
      | PlainMessage<IAMServiceListUserTokensResponse>
      | undefined,
    b:
      | IAMServiceListUserTokensResponse
      | PlainMessage<IAMServiceListUserTokensResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceListUserTokensResponse, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceRevokeTokenRequest
 */
export class IAMServiceRevokeTokenRequest extends Message<IAMServiceRevokeTokenRequest> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = "";

  constructor(data?: PartialMessage<IAMServiceRevokeTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceRevokeTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceRevokeTokenRequest {
    return new IAMServiceRevokeTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceRevokeTokenRequest {
    return new IAMServiceRevokeTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceRevokeTokenRequest {
    return new IAMServiceRevokeTokenRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceRevokeTokenRequest
      | PlainMessage<IAMServiceRevokeTokenRequest>
      | undefined,
    b:
      | IAMServiceRevokeTokenRequest
      | PlainMessage<IAMServiceRevokeTokenRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceRevokeTokenRequest, a, b);
  }
}

/**
 * @generated from message llmgw.v1.IAMServiceRevokeTokenResponse
 */
export class IAMServiceRevokeTokenResponse extends Message<IAMServiceRevokeTokenResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<IAMServiceRevokeTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llmgw.v1.IAMServiceRevokeTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IAMServiceRevokeTokenResponse {
    return new IAMServiceRevokeTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceRevokeTokenResponse {
    return new IAMServiceRevokeTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IAMServiceRevokeTokenResponse {
    return new IAMServiceRevokeTokenResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | IAMServiceRevokeTokenResponse
      | PlainMessage<IAMServiceRevokeTokenResponse>
      | undefined,
    b:
      | IAMServiceRevokeTokenResponse
      | PlainMessage<IAMServiceRevokeTokenResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(IAMServiceRevokeTokenResponse, a, b);
  }
}
